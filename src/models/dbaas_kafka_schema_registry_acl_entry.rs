/*
 * Exoscale Public API
 *
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DbaasKafkaSchemaRegistryAclEntry {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Kafka username or username pattern
    #[serde(rename = "username")]
    pub username: String,
    /// Kafka Schema Registry name or pattern
    #[serde(rename = "resource")]
    pub resource: String,
    /// Kafka Schema Registry permission
    #[serde(rename = "permission")]
    pub permission: Permission,
}

impl DbaasKafkaSchemaRegistryAclEntry {
    pub fn new(username: String, resource: String, permission: Permission) -> DbaasKafkaSchemaRegistryAclEntry {
        DbaasKafkaSchemaRegistryAclEntry {
            id: None,
            username,
            resource,
            permission,
        }
    }
}
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Permission {
    #[serde(rename = "schema_registry_read")]
    SchemaRegistryRead,
    #[serde(rename = "schema_registry_write")]
    SchemaRegistryWrite,
}

impl Default for Permission {
    fn default() -> Permission {
        Self::SchemaRegistryRead
    }
}

