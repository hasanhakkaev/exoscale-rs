/*
 * Exoscale Public API
 *
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SmtpServerSettings {
    #[serde(rename = "from_address")]
    pub from_address: String,
    #[serde(rename = "from_name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub from_name: Option<Option<String>>,
    #[serde(rename = "host")]
    pub host: String,
    #[serde(rename = "password", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub password: Option<Option<String>>,
    #[serde(rename = "port")]
    pub port: u16,
    #[serde(rename = "skip_verify", skip_serializing_if = "Option::is_none")]
    pub skip_verify: Option<bool>,
    #[serde(rename = "starttls_policy", skip_serializing_if = "Option::is_none")]
    pub starttls_policy: Option<StarttlsPolicy>,
    #[serde(rename = "username", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub username: Option<Option<String>>,
}

impl SmtpServerSettings {
    pub fn new(from_address: String, host: String, port: u16) -> SmtpServerSettings {
        SmtpServerSettings {
            from_address,
            from_name: None,
            host,
            password: None,
            port,
            skip_verify: None,
            starttls_policy: None,
            username: None,
        }
    }
}
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum StarttlsPolicy {
    #[serde(rename = "OpportunisticStartTLS")]
    OpportunisticStartTls,
    #[serde(rename = "MandatoryStartTLS")]
    MandatoryStartTls,
    #[serde(rename = "NoStartTLS")]
    NoStartTls,
}

impl Default for StarttlsPolicy {
    fn default() -> StarttlsPolicy {
        Self::OpportunisticStartTls
    }
}

