/*
 * Exoscale Public API
 *
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Operation {
    /// Operation ID
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<uuid::Uuid>,
    /// Operation failure reason
    #[serde(rename = "reason", skip_serializing_if = "Option::is_none")]
    pub reason: Option<Reason>,
    #[serde(rename = "reference", skip_serializing_if = "Option::is_none")]
    pub reference: Option<Box<models::OperationReference>>,
    /// Operation message
    #[serde(rename = "message", skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// Operation status
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<State>,
}

impl Operation {
    /// Operation
    pub fn new() -> Operation {
        Operation {
            id: None,
            reason: None,
            reference: None,
            message: None,
            state: None,
        }
    }
}
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Reason {
    #[serde(rename = "incorrect")]
    Incorrect,
    #[serde(rename = "unknown")]
    Unknown,
    #[serde(rename = "unavailable")]
    Unavailable,
    #[serde(rename = "forbidden")]
    Forbidden,
    #[serde(rename = "busy")]
    Busy,
    #[serde(rename = "fault")]
    Fault,
    #[serde(rename = "partial")]
    Partial,
    #[serde(rename = "not-found")]
    NotFound,
    #[serde(rename = "interrupted")]
    Interrupted,
    #[serde(rename = "unsupported")]
    Unsupported,
    #[serde(rename = "conflict")]
    Conflict,
}

impl Default for Reason {
    fn default() -> Reason {
        Self::Incorrect
    }
}
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "failure")]
    Failure,
    #[serde(rename = "pending")]
    Pending,
    #[serde(rename = "success")]
    Success,
    #[serde(rename = "timeout")]
    Timeout,
}

impl Default for State {
    fn default() -> State {
        Self::Failure
    }
}

