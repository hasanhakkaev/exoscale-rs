/*
 * Exoscale Public API
 *
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 * Generated by: https://openapi-generator.tech
 */
use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct JsonSchemaOpensearch {
    /// Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
    #[serde(
        rename = "thread_pool_search_throttled_size",
        skip_serializing_if = "Option::is_none"
    )]
    pub thread_pool_search_throttled_size: Option<i32>,
    /// Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
    #[serde(
        rename = "thread_pool_analyze_size",
        skip_serializing_if = "Option::is_none"
    )]
    pub thread_pool_analyze_size: Option<i32>,
    /// Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
    #[serde(
        rename = "thread_pool_get_size",
        skip_serializing_if = "Option::is_none"
    )]
    pub thread_pool_get_size: Option<i32>,
    /// Size for the thread pool queue. See documentation for exact details.
    #[serde(
        rename = "thread_pool_get_queue_size",
        skip_serializing_if = "Option::is_none"
    )]
    pub thread_pool_get_queue_size: Option<i32>,
    /// Absolute value. Default is unbound. Doesn't work without indices.memory.index_buffer_size. Maximum amount of heap used for query cache, an absolute indices.memory.index_buffer_size maximum hard limit.
    #[serde(
        rename = "indices_memory_max_index_buffer_size",
        skip_serializing_if = "Option::is_none"
    )]
    pub indices_memory_max_index_buffer_size: Option<i32>,
    /// Number of file chunks sent in parallel for each recovery. Defaults to 2.
    #[serde(
        rename = "indices_recovery_max_concurrent_file_chunks",
        skip_serializing_if = "Option::is_none"
    )]
    pub indices_recovery_max_concurrent_file_chunks: Option<i32>,
    /// Percentage value. Default is 10%. Maximum amount of heap used for query cache. This is an expert setting. Too low value will decrease query performance and increase performance for other operations; too high value will cause issues with other OpenSearch functionality.
    #[serde(
        rename = "indices_queries_cache_size",
        skip_serializing_if = "Option::is_none"
    )]
    pub indices_queries_cache_size: Option<i32>,
    #[serde(
        rename = "search_backpressure",
        skip_serializing_if = "Option::is_none"
    )]
    pub search_backpressure: Option<Box<models::SearchBackpressureSettings>>,
    #[serde(
        rename = "shard_indexing_pressure",
        skip_serializing_if = "Option::is_none"
    )]
    pub shard_indexing_pressure: Option<Box<models::ShardIndexingBackPressureSettings>>,
    /// Enable or disable KNN memory circuit breaker. Defaults to true.
    #[serde(
        rename = "knn_memory_circuit_breaker_enabled",
        skip_serializing_if = "Option::is_none"
    )]
    pub knn_memory_circuit_breaker_enabled: Option<bool>,
    /// Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
    #[serde(
        rename = "thread_pool_search_size",
        skip_serializing_if = "Option::is_none"
    )]
    pub thread_pool_search_size: Option<i32>,
    /// Absolute value. Default is 48mb. Doesn't work without indices.memory.index_buffer_size. Minimum amount of heap used for query cache, an absolute indices.memory.index_buffer_size minimal hard limit.
    #[serde(
        rename = "indices_memory_min_index_buffer_size",
        skip_serializing_if = "Option::is_none"
    )]
    pub indices_memory_min_index_buffer_size: Option<i32>,
    /// Limits total inbound and outbound recovery traffic for each node. Applies to both peer recoveries as well as snapshot recoveries (i.e., restores from a snapshot). Defaults to 40mb
    #[serde(
        rename = "indices_recovery_max_bytes_per_sec",
        skip_serializing_if = "Option::is_none"
    )]
    pub indices_recovery_max_bytes_per_sec: Option<i32>,
    /// The max length of an HTTP URL, in bytes
    #[serde(
        rename = "http_max_initial_line_length",
        skip_serializing_if = "Option::is_none"
    )]
    pub http_max_initial_line_length: Option<i32>,
    #[serde(
        rename = "enable_security_audit",
        skip_serializing_if = "Option::is_none"
    )]
    pub enable_security_audit: Option<bool>,
    /// Size for the thread pool queue. See documentation for exact details.
    #[serde(
        rename = "thread_pool_write_queue_size",
        skip_serializing_if = "Option::is_none"
    )]
    pub thread_pool_write_queue_size: Option<i32>,
    /// Script compilation circuit breaker limits the number of inline script compilations within a period of time. Default is use-context
    #[serde(
        rename = "script_max_compilations_rate",
        skip_serializing_if = "Option::is_none"
    )]
    pub script_max_compilations_rate: Option<String>,
    /// Maximum number of aggregation buckets allowed in a single response. OpenSearch default value is used when this is not defined.
    #[serde(
        rename = "search_max_buckets",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub search_max_buckets: Option<Option<i32>>,
    /// Whitelisted addresses for reindexing. Changing this value will cause all OpenSearch instances to restart.
    #[serde(
        rename = "reindex_remote_whitelist",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub reindex_remote_whitelist: Option<Option<Vec<String>>>,
    /// Compatibility mode sets OpenSearch to report its version as 7.10 so clients continue to work. Default is false
    #[serde(
        rename = "override_main_response_version",
        skip_serializing_if = "Option::is_none"
    )]
    pub override_main_response_version: Option<bool>,
    /// The max size of allowed headers, in bytes
    #[serde(
        rename = "http_max_header_size",
        skip_serializing_if = "Option::is_none"
    )]
    pub http_max_header_size: Option<i32>,
    #[serde(rename = "email-sender", skip_serializing_if = "Option::is_none")]
    pub email_sender: Option<Box<models::OpensearchEmailSenderSettings>>,
    /// Relative amount. Maximum amount of heap memory used for field data cache. This is an expert setting; decreasing the value too much will increase overhead of loading field data; too much memory used for field data cache will decrease amount of heap available for other operations.
    #[serde(
        rename = "indices_fielddata_cache_size",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub indices_fielddata_cache_size: Option<Option<i32>>,
    #[serde(
        rename = "action_destructive_requires_name",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub action_destructive_requires_name: Option<Option<bool>>,
    /// Enable or disable filtering of alerting by backend roles. Requires Security plugin. Defaults to false
    #[serde(
        rename = "plugins_alerting_filter_by_backend_roles",
        skip_serializing_if = "Option::is_none"
    )]
    pub plugins_alerting_filter_by_backend_roles: Option<bool>,
    /// Percentage value. Default is 10%. Total amount of heap used for indexing buffer, before writing segments to disk. This is an expert setting. Too low value will slow down indexing; too high value will increase indexing performance but causes performance issues for query performance.
    #[serde(
        rename = "indices_memory_index_buffer_size",
        skip_serializing_if = "Option::is_none"
    )]
    pub indices_memory_index_buffer_size: Option<i32>,
    /// Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
    #[serde(
        rename = "thread_pool_force_merge_size",
        skip_serializing_if = "Option::is_none"
    )]
    pub thread_pool_force_merge_size: Option<i32>,
    #[serde(
        rename = "auth_failure_listeners",
        skip_serializing_if = "Option::is_none"
    )]
    pub auth_failure_listeners: Option<Box<models::OpensearchSecurityPluginSettings>>,
    #[serde(rename = "ism-history", skip_serializing_if = "Option::is_none")]
    pub ism_history: Option<Box<models::OpensearchIsmHistorySettings>>,
    /// How many concurrent incoming/outgoing shard recoveries (normally replicas) are allowed to happen on a node. Defaults to 2.
    #[serde(
        rename = "cluster_routing_allocation_node_concurrent_recoveries",
        skip_serializing_if = "Option::is_none"
    )]
    pub cluster_routing_allocation_node_concurrent_recoveries: Option<i32>,
    /// Size for the thread pool queue. See documentation for exact details.
    #[serde(
        rename = "thread_pool_analyze_queue_size",
        skip_serializing_if = "Option::is_none"
    )]
    pub thread_pool_analyze_queue_size: Option<i32>,
    /// Explicitly allow or block automatic creation of indices. Defaults to true
    #[serde(
        rename = "action_auto_create_index_enabled",
        skip_serializing_if = "Option::is_none"
    )]
    pub action_auto_create_index_enabled: Option<bool>,
    /// Maximum content length for HTTP requests to the OpenSearch HTTP API, in bytes.
    #[serde(
        rename = "http_max_content_length",
        skip_serializing_if = "Option::is_none"
    )]
    pub http_max_content_length: Option<i32>,
    /// Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
    #[serde(
        rename = "thread_pool_write_size",
        skip_serializing_if = "Option::is_none"
    )]
    pub thread_pool_write_size: Option<i32>,
    /// Size for the thread pool queue. See documentation for exact details.
    #[serde(
        rename = "thread_pool_search_queue_size",
        skip_serializing_if = "Option::is_none"
    )]
    pub thread_pool_search_queue_size: Option<i32>,
    /// Maximum amount of memory that can be used for KNN index. Defaults to 50% of the JVM heap size.
    #[serde(
        rename = "knn_memory_circuit_breaker_limit",
        skip_serializing_if = "Option::is_none"
    )]
    pub knn_memory_circuit_breaker_limit: Option<i32>,
    /// Maximum number of clauses Lucene BooleanQuery can have. The default value (1024) is relatively high, and increasing it may cause performance issues. Investigate other approaches first before increasing this value.
    #[serde(
        rename = "indices_query_bool_max_clause_count",
        skip_serializing_if = "Option::is_none"
    )]
    pub indices_query_bool_max_clause_count: Option<i32>,
    /// Size for the thread pool queue. See documentation for exact details.
    #[serde(
        rename = "thread_pool_search_throttled_queue_size",
        skip_serializing_if = "Option::is_none"
    )]
    pub thread_pool_search_throttled_queue_size: Option<i32>,
    /// Controls the number of shards allowed in the cluster per data node
    #[serde(
        rename = "cluster_max_shards_per_node",
        skip_serializing_if = "Option::is_none"
    )]
    pub cluster_max_shards_per_node: Option<i32>,
}

impl JsonSchemaOpensearch {
    pub fn new() -> JsonSchemaOpensearch {
        JsonSchemaOpensearch {
            thread_pool_search_throttled_size: None,
            thread_pool_analyze_size: None,
            thread_pool_get_size: None,
            thread_pool_get_queue_size: None,
            indices_memory_max_index_buffer_size: None,
            indices_recovery_max_concurrent_file_chunks: None,
            indices_queries_cache_size: None,
            search_backpressure: None,
            shard_indexing_pressure: None,
            knn_memory_circuit_breaker_enabled: None,
            thread_pool_search_size: None,
            indices_memory_min_index_buffer_size: None,
            indices_recovery_max_bytes_per_sec: None,
            http_max_initial_line_length: None,
            enable_security_audit: None,
            thread_pool_write_queue_size: None,
            script_max_compilations_rate: None,
            search_max_buckets: None,
            reindex_remote_whitelist: None,
            override_main_response_version: None,
            http_max_header_size: None,
            email_sender: None,
            indices_fielddata_cache_size: None,
            action_destructive_requires_name: None,
            plugins_alerting_filter_by_backend_roles: None,
            indices_memory_index_buffer_size: None,
            thread_pool_force_merge_size: None,
            auth_failure_listeners: None,
            ism_history: None,
            cluster_routing_allocation_node_concurrent_recoveries: None,
            thread_pool_analyze_queue_size: None,
            action_auto_create_index_enabled: None,
            http_max_content_length: None,
            thread_pool_write_size: None,
            thread_pool_search_queue_size: None,
            knn_memory_circuit_breaker_limit: None,
            indices_query_bool_max_clause_count: None,
            thread_pool_search_throttled_queue_size: None,
            cluster_max_shards_per_node: None,
        }
    }
}
