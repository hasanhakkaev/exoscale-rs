/*
 * Exoscale Public API
 *
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateSksNodepoolRequest {
    /// Nodepool Anti-affinity Groups
    #[serde(rename = "anti-affinity-groups", skip_serializing_if = "Option::is_none")]
    pub anti_affinity_groups: Option<Vec<models::AntiAffinityGroup>>,
    /// Nodepool description
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Configures public IP assignment of the Instances with:  * IPv4 (`inet4`) addressing only (default); * both IPv4 and IPv6 (`dual`) addressing.
    #[serde(rename = "public-ip-assignment", skip_serializing_if = "Option::is_none")]
    pub public_ip_assignment: Option<PublicIpAssignment>,
    #[serde(rename = "labels", skip_serializing_if = "Option::is_none")]
    pub labels: Option<std::collections::HashMap<String, String>>,
    #[serde(rename = "taints", skip_serializing_if = "Option::is_none")]
    pub taints: Option<std::collections::HashMap<String, models::SksNodepoolTaint>>,
    /// Nodepool Security Groups
    #[serde(rename = "security-groups", skip_serializing_if = "Option::is_none")]
    pub security_groups: Option<Vec<models::SecurityGroup>>,
    /// Nodepool name, lowercase only
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "instance-type")]
    pub instance_type: Box<models::InstanceType>,
    /// Nodepool Private Networks
    #[serde(rename = "private-networks", skip_serializing_if = "Option::is_none")]
    pub private_networks: Option<Vec<models::PrivateNetwork>>,
    /// Number of instances
    #[serde(rename = "size")]
    pub size: u64,
    #[serde(rename = "kubelet-image-gc", skip_serializing_if = "Option::is_none")]
    pub kubelet_image_gc: Option<Box<models::KubeletImageGc>>,
    /// Prefix to apply to instances names (default: pool), lowercase only
    #[serde(rename = "instance-prefix", skip_serializing_if = "Option::is_none")]
    pub instance_prefix: Option<String>,
    #[serde(rename = "deploy-target", skip_serializing_if = "Option::is_none")]
    pub deploy_target: Option<Box<models::DeployTarget>>,
    /// Nodepool addons
    #[serde(rename = "addons", skip_serializing_if = "Option::is_none")]
    pub addons: Option<std::collections::HashSet<Addons>>,
    /// Nodepool instances disk size in GiB
    #[serde(rename = "disk-size")]
    pub disk_size: u64,
}

impl CreateSksNodepoolRequest {
    pub fn new(name: String, instance_type: models::InstanceType, size: u64, disk_size: u64) -> CreateSksNodepoolRequest {
        CreateSksNodepoolRequest {
            anti_affinity_groups: None,
            description: None,
            public_ip_assignment: None,
            labels: None,
            taints: None,
            security_groups: None,
            name,
            instance_type: Box::new(instance_type),
            private_networks: None,
            size,
            kubelet_image_gc: None,
            instance_prefix: None,
            deploy_target: None,
            addons: None,
            disk_size,
        }
    }
}
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PublicIpAssignment {
    #[serde(rename = "inet4")]
    Inet4,
    #[serde(rename = "dual")]
    Dual,
}

impl Default for PublicIpAssignment {
    fn default() -> PublicIpAssignment {
        Self::Inet4
    }
}
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Addons {
    #[serde(rename = "storage-lvm")]
    StorageLvm,
}

impl Default for Addons {
    fn default() -> Addons {
        Self::StorageLvm
    }
}

