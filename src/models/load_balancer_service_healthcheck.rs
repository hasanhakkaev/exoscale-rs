/*
 * Exoscale Public API
 *
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// LoadBalancerServiceHealthcheck: Load Balancer Service healthcheck
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct LoadBalancerServiceHealthcheck {
    /// Healthcheck mode
    #[serde(rename = "mode", skip_serializing_if = "Option::is_none")]
    pub mode: Option<Mode>,
    /// Healthcheck interval (default: 10). Must be greater than or equal to Timeout
    #[serde(rename = "interval", skip_serializing_if = "Option::is_none")]
    pub interval: Option<u64>,
    /// An endpoint to use for the HTTP healthcheck, e.g. '/status'
    #[serde(rename = "uri", skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
    /// Healthcheck port
    #[serde(rename = "port", skip_serializing_if = "Option::is_none")]
    pub port: Option<u64>,
    /// Healthcheck timeout value (default: 2). Must be lower than or equal to Interval
    #[serde(rename = "timeout", skip_serializing_if = "Option::is_none")]
    pub timeout: Option<u64>,
    /// Number of retries before considering a Service failed
    #[serde(rename = "retries", skip_serializing_if = "Option::is_none")]
    pub retries: Option<u64>,
    /// SNI domain for HTTPS healthchecks
    #[serde(rename = "tls-sni", skip_serializing_if = "Option::is_none")]
    pub tls_sni: Option<String>,
}

impl LoadBalancerServiceHealthcheck {
    /// Load Balancer Service healthcheck
    pub fn new() -> LoadBalancerServiceHealthcheck {
        LoadBalancerServiceHealthcheck {
            mode: None,
            interval: None,
            uri: None,
            port: None,
            timeout: None,
            retries: None,
            tls_sni: None,
        }
    }
}
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Mode {
    #[serde(rename = "tcp")]
    Tcp,
    #[serde(rename = "http")]
    Http,
    #[serde(rename = "https")]
    Https,
}

impl Default for Mode {
    fn default() -> Mode {
        Self::Tcp
    }
}

