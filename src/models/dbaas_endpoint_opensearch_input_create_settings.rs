/*
 * Exoscale Public API
 *
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DbaasEndpointOpensearchInputCreateSettings {
    /// PEM encoded CA certificate
    #[serde(rename = "ca", skip_serializing_if = "Option::is_none")]
    pub ca: Option<String>,
    /// OpenSearch connection URL
    #[serde(rename = "url")]
    pub url: String,
    /// OpenSearch index prefix
    #[serde(rename = "index-prefix")]
    pub index_prefix: String,
    /// Maximum number of days of logs to keep
    #[serde(rename = "index-days-max", skip_serializing_if = "Option::is_none")]
    pub index_days_max: Option<u64>,
    /// OpenSearch request timeout limit
    #[serde(rename = "timeout", skip_serializing_if = "Option::is_none")]
    pub timeout: Option<u64>,
}

impl DbaasEndpointOpensearchInputCreateSettings {
    pub fn new(url: String, index_prefix: String) -> DbaasEndpointOpensearchInputCreateSettings {
        DbaasEndpointOpensearchInputCreateSettings {
            ca: None,
            url,
            index_prefix,
            index_days_max: None,
            timeout: None,
        }
    }
}

