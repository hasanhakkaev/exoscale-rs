/*
 * Exoscale Public API
 *
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OperatingFactor {
    /// Specify the upper occupancy limit of the allocated quota of memory for the shard. If the total memory usage of a shard is above this limit, shard indexing backpressure increases the current allocated memory for that shard. Default is 0.95
    #[serde(rename = "upper", skip_serializing_if = "Option::is_none")]
    pub upper: Option<f64>,
    /// Specify the optimal occupancy of the allocated quota of memory for the shard. If the total memory usage of a shard is at this level, shard indexing backpressure doesnâ€™t change the current allocated memory for that shard. Default is 0.85
    #[serde(rename = "optimal", skip_serializing_if = "Option::is_none")]
    pub optimal: Option<f64>,
    /// Specify the lower occupancy limit of the allocated quota of memory for the shard. If the total memory usage of a shard is below this limit, shard indexing backpressure decreases the current allocated memory for that shard. Default is 0.75
    #[serde(rename = "lower", skip_serializing_if = "Option::is_none")]
    pub lower: Option<f64>,
}

impl OperatingFactor {
    pub fn new() -> OperatingFactor {
        OperatingFactor {
            upper: None,
            optimal: None,
            lower: None,
        }
    }
}

