/*
 * Exoscale Public API
 *
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateDnsDomainRecordRequest {
    /// DNS domain record name
    #[serde(rename = "name")]
    pub name: String,
    /// DNS domain record type
    #[serde(rename = "type")]
    pub r#type: Type,
    /// DNS domain record content
    #[serde(rename = "content")]
    pub content: String,
    /// DNS domain record TTL
    #[serde(rename = "ttl", skip_serializing_if = "Option::is_none")]
    pub ttl: Option<i64>,
    /// DNS domain record priority
    #[serde(rename = "priority", skip_serializing_if = "Option::is_none")]
    pub priority: Option<i64>,
}

impl CreateDnsDomainRecordRequest {
    pub fn new(name: String, r#type: Type, content: String) -> CreateDnsDomainRecordRequest {
        CreateDnsDomainRecordRequest {
            name,
            r#type,
            content,
            ttl: None,
            priority: None,
        }
    }
}

/// DNS domain record type
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "NS")]
    Ns,
    #[serde(rename = "CAA")]
    Caa,
    #[serde(rename = "NAPTR")]
    Naptr,
    #[serde(rename = "POOL")]
    Pool,
    #[serde(rename = "A")]
    A,
    #[serde(rename = "HINFO")]
    Hinfo,
    #[serde(rename = "CNAME")]
    Cname,
    #[serde(rename = "SSHFP")]
    Sshfp,
    #[serde(rename = "SRV")]
    Srv,
    #[serde(rename = "AAAA")]
    Aaaa,
    #[serde(rename = "MX")]
    Mx,
    #[serde(rename = "TXT")]
    Txt,
    #[serde(rename = "ALIAS")]
    Alias,
    #[serde(rename = "URL")]
    Url,
    #[serde(rename = "SPF")]
    Spf,
}

impl Default for Type {
    fn default() -> Type {
        Self::Ns
    }
}

