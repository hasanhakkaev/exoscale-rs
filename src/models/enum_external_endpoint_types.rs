/*
 * Exoscale Public API
 *
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};


#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum EnumExternalEndpointTypes {
    #[serde(rename = "prometheus")]
    Prometheus,
    #[serde(rename = "opensearch")]
    Opensearch,
    #[serde(rename = "rsyslog")]
    Rsyslog,
    #[serde(rename = "datadog")]
    Datadog,
    #[serde(rename = "elasticsearch")]
    Elasticsearch,

}

impl std::fmt::Display for EnumExternalEndpointTypes {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Prometheus => write!(f, "prometheus"),
            Self::Opensearch => write!(f, "opensearch"),
            Self::Rsyslog => write!(f, "rsyslog"),
            Self::Datadog => write!(f, "datadog"),
            Self::Elasticsearch => write!(f, "elasticsearch"),
        }
    }
}

impl Default for EnumExternalEndpointTypes {
    fn default() -> EnumExternalEndpointTypes {
        Self::Prometheus
    }
}

