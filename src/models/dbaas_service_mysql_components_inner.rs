/*
 * Exoscale Public API
 *
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DbaasServiceMysqlComponentsInner {
    /// Service component name
    #[serde(rename = "component")]
    pub component: String,
    /// DNS name for connecting to the service component
    #[serde(rename = "host")]
    pub host: String,
    /// Port number for connecting to the service component
    #[serde(rename = "port")]
    pub port: u64,
    #[serde(rename = "route")]
    pub route: models::EnumComponentRoute,
    #[serde(rename = "usage")]
    pub usage: models::EnumComponentUsage,
}

impl DbaasServiceMysqlComponentsInner {
    pub fn new(component: String, host: String, port: u64, route: models::EnumComponentRoute, usage: models::EnumComponentUsage) -> DbaasServiceMysqlComponentsInner {
        DbaasServiceMysqlComponentsInner {
            component,
            host,
            port,
            route,
            usage,
        }
    }
}

