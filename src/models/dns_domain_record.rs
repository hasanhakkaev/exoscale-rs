/*
 * Exoscale Public API
 *
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DnsDomainRecord {
    /// DNS domain record update date
    #[serde(rename = "updated-at", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
    /// DNS domain record content
    #[serde(rename = "content", skip_serializing_if = "Option::is_none")]
    pub content: Option<String>,
    /// DNS domain record name
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// DNS domain record type
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Type>,
    /// DNS domain record TTL
    #[serde(rename = "ttl", skip_serializing_if = "Option::is_none")]
    pub ttl: Option<u64>,
    /// DNS domain record priority
    #[serde(rename = "priority", skip_serializing_if = "Option::is_none")]
    pub priority: Option<u64>,
    /// DNS domain record ID
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<uuid::Uuid>,
    /// DNS domain record creation date
    #[serde(rename = "created-at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    /// DNS domain record system status
    #[serde(rename = "system-record", skip_serializing_if = "Option::is_none")]
    pub system_record: Option<bool>,
}

impl DnsDomainRecord {
    /// DNS domain record
    pub fn new() -> DnsDomainRecord {
        DnsDomainRecord {
            updated_at: None,
            content: None,
            name: None,
            r#type: None,
            ttl: None,
            priority: None,
            id: None,
            created_at: None,
            system_record: None,
        }
    }
}
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "NS")]
    Ns,
    #[serde(rename = "CAA")]
    Caa,
    #[serde(rename = "NAPTR")]
    Naptr,
    #[serde(rename = "POOL")]
    Pool,
    #[serde(rename = "A")]
    A,
    #[serde(rename = "HINFO")]
    Hinfo,
    #[serde(rename = "CNAME")]
    Cname,
    #[serde(rename = "SOA")]
    Soa,
    #[serde(rename = "SSHFP")]
    Sshfp,
    #[serde(rename = "SRV")]
    Srv,
    #[serde(rename = "AAAA")]
    Aaaa,
    #[serde(rename = "MX")]
    Mx,
    #[serde(rename = "TXT")]
    Txt,
    #[serde(rename = "ALIAS")]
    Alias,
    #[serde(rename = "URL")]
    Url,
    #[serde(rename = "SPF")]
    Spf,
}

impl Default for Type {
    fn default() -> Type {
        Self::Ns
    }
}

