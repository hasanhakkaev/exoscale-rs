/*
 * Exoscale Public API
 *
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 * Generated by: https://openapi-generator.tech
 */
use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateInstanceRequest {
    /// Instance Anti-affinity Groups
    #[serde(
        rename = "anti-affinity-groups",
        skip_serializing_if = "Option::is_none"
    )]
    pub anti_affinity_groups: Option<Vec<models::AntiAffinityGroup>>,
    #[serde(
        rename = "public-ip-assignment",
        skip_serializing_if = "Option::is_none"
    )]
    pub public_ip_assignment: Option<models::PublicIpAssignment>,
    #[serde(rename = "labels", skip_serializing_if = "Option::is_none")]
    pub labels: Option<std::collections::HashMap<String, String>>,
    /// Start Instance on creation (default: true)
    #[serde(rename = "auto-start", skip_serializing_if = "Option::is_none")]
    pub auto_start: Option<bool>,
    /// Instance Security Groups
    #[serde(rename = "security-groups", skip_serializing_if = "Option::is_none")]
    pub security_groups: Option<Vec<models::SecurityGroup>>,
    /// Instance name
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "instance-type")]
    pub instance_type: Box<models::InstanceType>,
    #[serde(rename = "template")]
    pub template: Box<models::Template>,
    #[serde(rename = "ssh-key", skip_serializing_if = "Option::is_none")]
    pub ssh_key: Option<Box<models::SshKey>>,
    /// Instance Cloud-init user-data (base64 encoded)
    #[serde(rename = "user-data", skip_serializing_if = "Option::is_none")]
    pub user_data: Option<String>,
    #[serde(rename = "deploy-target", skip_serializing_if = "Option::is_none")]
    pub deploy_target: Option<Box<models::DeployTarget>>,
    /// Enable IPv6. DEPRECATED: use `public-ip-assignments`.
    #[serde(rename = "ipv6-enabled", skip_serializing_if = "Option::is_none")]
    pub ipv6_enabled: Option<bool>,
    /// Instance disk size in GiB
    #[serde(rename = "disk-size")]
    pub disk_size: i64,
    /// Instance SSH Keys
    #[serde(rename = "ssh-keys", skip_serializing_if = "Option::is_none")]
    pub ssh_keys: Option<Vec<models::SshKey>>,
}

impl CreateInstanceRequest {
    pub fn new(
        instance_type: models::InstanceType,
        template: models::Template,
        disk_size: i64,
    ) -> CreateInstanceRequest {
        CreateInstanceRequest {
            anti_affinity_groups: None,
            public_ip_assignment: None,
            labels: None,
            auto_start: None,
            security_groups: None,
            name: None,
            instance_type: Box::new(instance_type),
            template: Box::new(template),
            ssh_key: None,
            user_data: None,
            deploy_target: None,
            ipv6_enabled: None,
            disk_size,
            ssh_keys: None,
        }
    }
}
