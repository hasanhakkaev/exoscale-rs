/*
 * Exoscale Public API
 *
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct JsonSchemaGrafana {
    #[serde(rename = "allow_embedding", skip_serializing_if = "Option::is_none")]
    pub allow_embedding: Option<bool>,
    #[serde(rename = "cookie_samesite", skip_serializing_if = "Option::is_none")]
    pub cookie_samesite: Option<CookieSamesite>,
    /// This feature is new in Grafana 9 and is quite resource intensive. It may cause low-end plans to work more slowly while the dashboard previews are rendering.
    #[serde(rename = "dashboard_previews_enabled", skip_serializing_if = "Option::is_none")]
    pub dashboard_previews_enabled: Option<bool>,
    #[serde(rename = "metrics_enabled", skip_serializing_if = "Option::is_none")]
    pub metrics_enabled: Option<bool>,
    #[serde(rename = "auth_azuread", skip_serializing_if = "Option::is_none")]
    pub auth_azuread: Option<Box<models::AzureAdOAuthIntegration>>,
    #[serde(rename = "alerting_enabled", skip_serializing_if = "Option::is_none")]
    pub alerting_enabled: Option<bool>,
    /// Setting to enable/disable Write-Ahead Logging. The default value is false (disabled).
    #[serde(rename = "wal", skip_serializing_if = "Option::is_none")]
    pub wal: Option<bool>,
    #[serde(rename = "unified_alerting_enabled", skip_serializing_if = "Option::is_none")]
    pub unified_alerting_enabled: Option<bool>,
    #[serde(rename = "auth_github", skip_serializing_if = "Option::is_none")]
    pub auth_github: Option<Box<models::GithubAuthIntegration>>,
    #[serde(rename = "user_auto_assign_org", skip_serializing_if = "Option::is_none")]
    pub user_auto_assign_org: Option<bool>,
    #[serde(rename = "dataproxy_send_user_header", skip_serializing_if = "Option::is_none")]
    pub dataproxy_send_user_header: Option<bool>,
    #[serde(rename = "google_analytics_ua_id", skip_serializing_if = "Option::is_none")]
    pub google_analytics_ua_id: Option<String>,
    #[serde(rename = "dashboards_versions_to_keep", skip_serializing_if = "Option::is_none")]
    pub dashboards_versions_to_keep: Option<u8>,
    #[serde(rename = "editors_can_admin", skip_serializing_if = "Option::is_none")]
    pub editors_can_admin: Option<bool>,
    #[serde(rename = "smtp_server", skip_serializing_if = "Option::is_none")]
    pub smtp_server: Option<Box<models::SmtpServerSettings>>,
    #[serde(rename = "auth_gitlab", skip_serializing_if = "Option::is_none")]
    pub auth_gitlab: Option<Box<models::GitLabAuthIntegration>>,
    #[serde(rename = "alerting_nodata_or_nullvalues", skip_serializing_if = "Option::is_none")]
    pub alerting_nodata_or_nullvalues: Option<AlertingNodataOrNullvalues>,
    #[serde(rename = "auth_basic_enabled", skip_serializing_if = "Option::is_none")]
    pub auth_basic_enabled: Option<bool>,
    #[serde(rename = "date_formats", skip_serializing_if = "Option::is_none")]
    pub date_formats: Option<Box<models::GrafanaDateFormatSpecifications>>,
    /// Store logs for the service so that they are available in the HTTP API and console.
    #[serde(rename = "service_log", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub service_log: Option<Option<bool>>,
    #[serde(rename = "disable_gravatar", skip_serializing_if = "Option::is_none")]
    pub disable_gravatar: Option<bool>,
    #[serde(rename = "user_auto_assign_org_role", skip_serializing_if = "Option::is_none")]
    pub user_auto_assign_org_role: Option<UserAutoAssignOrgRole>,
    #[serde(rename = "dataproxy_timeout", skip_serializing_if = "Option::is_none")]
    pub dataproxy_timeout: Option<u8>,
    #[serde(rename = "viewers_can_edit", skip_serializing_if = "Option::is_none")]
    pub viewers_can_edit: Option<bool>,
    /// Signed sequence of decimal numbers, followed by a unit suffix (ms, s, m, h, d), e.g. 30s, 1h
    #[serde(rename = "dashboards_min_refresh_interval", skip_serializing_if = "Option::is_none")]
    pub dashboards_min_refresh_interval: Option<String>,
    #[serde(rename = "auth_google", skip_serializing_if = "Option::is_none")]
    pub auth_google: Option<Box<models::GoogleAuthIntegration>>,
    #[serde(rename = "oauth_allow_insecure_email_lookup", skip_serializing_if = "Option::is_none")]
    pub oauth_allow_insecure_email_lookup: Option<bool>,
    #[serde(rename = "alerting_max_annotations_to_keep", skip_serializing_if = "Option::is_none")]
    pub alerting_max_annotations_to_keep: Option<u32>,
    #[serde(rename = "auth_generic_oauth", skip_serializing_if = "Option::is_none")]
    pub auth_generic_oauth: Option<Box<models::GenericOAuthIntegration>>,
    /// Serve the web frontend using a custom CNAME pointing to the Aiven DNS name
    #[serde(rename = "custom_domain", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub custom_domain: Option<Option<String>>,
    #[serde(rename = "alerting_error_or_timeout", skip_serializing_if = "Option::is_none")]
    pub alerting_error_or_timeout: Option<AlertingErrorOrTimeout>,
}

impl JsonSchemaGrafana {
    pub fn new() -> JsonSchemaGrafana {
        JsonSchemaGrafana {
            allow_embedding: None,
            cookie_samesite: None,
            dashboard_previews_enabled: None,
            metrics_enabled: None,
            auth_azuread: None,
            alerting_enabled: None,
            wal: None,
            unified_alerting_enabled: None,
            auth_github: None,
            user_auto_assign_org: None,
            dataproxy_send_user_header: None,
            google_analytics_ua_id: None,
            dashboards_versions_to_keep: None,
            editors_can_admin: None,
            smtp_server: None,
            auth_gitlab: None,
            alerting_nodata_or_nullvalues: None,
            auth_basic_enabled: None,
            date_formats: None,
            service_log: None,
            disable_gravatar: None,
            user_auto_assign_org_role: None,
            dataproxy_timeout: None,
            viewers_can_edit: None,
            dashboards_min_refresh_interval: None,
            auth_google: None,
            oauth_allow_insecure_email_lookup: None,
            alerting_max_annotations_to_keep: None,
            auth_generic_oauth: None,
            custom_domain: None,
            alerting_error_or_timeout: None,
        }
    }
}
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CookieSamesite {
    #[serde(rename = "lax")]
    Lax,
    #[serde(rename = "strict")]
    Strict,
    #[serde(rename = "none")]
    None,
}

impl Default for CookieSamesite {
    fn default() -> CookieSamesite {
        Self::Lax
    }
}
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AlertingNodataOrNullvalues {
    #[serde(rename = "alerting")]
    Alerting,
    #[serde(rename = "no_data")]
    NoData,
    #[serde(rename = "keep_state")]
    KeepState,
    #[serde(rename = "ok")]
    Ok,
}

impl Default for AlertingNodataOrNullvalues {
    fn default() -> AlertingNodataOrNullvalues {
        Self::Alerting
    }
}
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum UserAutoAssignOrgRole {
    #[serde(rename = "Viewer")]
    Viewer,
    #[serde(rename = "Admin")]
    Admin,
    #[serde(rename = "Editor")]
    Editor,
}

impl Default for UserAutoAssignOrgRole {
    fn default() -> UserAutoAssignOrgRole {
        Self::Viewer
    }
}
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AlertingErrorOrTimeout {
    #[serde(rename = "alerting")]
    Alerting,
    #[serde(rename = "keep_state")]
    KeepState,
}

impl Default for AlertingErrorOrTimeout {
    fn default() -> AlertingErrorOrTimeout {
        Self::Alerting
    }
}

