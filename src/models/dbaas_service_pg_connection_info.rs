/*
 * Exoscale Public API
 *
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// DbaasServicePgConnectionInfo: PG connection information properties
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DbaasServicePgConnectionInfo {
    #[serde(rename = "uri", skip_serializing_if = "Option::is_none")]
    pub uri: Option<Vec<String>>,
    #[serde(rename = "params", skip_serializing_if = "Option::is_none")]
    pub params: Option<Vec<std::collections::HashMap<String, String>>>,
    #[serde(rename = "standby", skip_serializing_if = "Option::is_none")]
    pub standby: Option<Vec<String>>,
    #[serde(rename = "syncing", skip_serializing_if = "Option::is_none")]
    pub syncing: Option<Vec<String>>,
}

impl DbaasServicePgConnectionInfo {
    /// PG connection information properties
    pub fn new() -> DbaasServicePgConnectionInfo {
        DbaasServicePgConnectionInfo {
            uri: None,
            params: None,
            standby: None,
            syncing: None,
        }
    }
}

