/*
 * Exoscale Public API
 *
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 * Generated by: https://openapi-generator.tech
 */#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ConfigureLogCleanerForTopicCompaction {
    /// How long are delete records retained?
    #[serde(
        rename = "log_cleaner_delete_retention_ms",
        skip_serializing_if = "Option::is_none"
    )]
    pub log_cleaner_delete_retention_ms: Option<i32>,
    /// The maximum amount of time message will remain uncompacted. Only applicable for logs that are being compacted
    #[serde(
        rename = "log_cleaner_max_compaction_lag_ms",
        skip_serializing_if = "Option::is_none"
    )]
    pub log_cleaner_max_compaction_lag_ms: Option<i32>,
    /// Controls log compactor frequency. Larger value means more frequent compactions but also more space wasted for logs. Consider setting log.cleaner.max.compaction.lag.ms to enforce compactions sooner, instead of setting a very high value for this option.
    #[serde(
        rename = "log_cleaner_min_cleanable_ratio",
        skip_serializing_if = "Option::is_none"
    )]
    pub log_cleaner_min_cleanable_ratio: Option<f64>,
    /// The minimum time a message will remain uncompacted in the log. Only applicable for logs that are being compacted.
    #[serde(
        rename = "log_cleaner_min_compaction_lag_ms",
        skip_serializing_if = "Option::is_none"
    )]
    pub log_cleaner_min_compaction_lag_ms: Option<i32>,
    /// The default cleanup policy for segments beyond the retention window
    #[serde(rename = "log_cleanup_policy", skip_serializing_if = "Option::is_none")]
    pub log_cleanup_policy: Option<LogCleanupPolicy>,
}

impl ConfigureLogCleanerForTopicCompaction {
    pub fn new() -> ConfigureLogCleanerForTopicCompaction {
        ConfigureLogCleanerForTopicCompaction {
            log_cleaner_delete_retention_ms: None,
            log_cleaner_max_compaction_lag_ms: None,
            log_cleaner_min_cleanable_ratio: None,
            log_cleaner_min_compaction_lag_ms: None,
            log_cleanup_policy: None,
        }
    }
}
/// The default cleanup policy for segments beyond the retention window
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum LogCleanupPolicy {
    #[serde(rename = "delete")]
    Delete,
    #[serde(rename = "compact")]
    Compact,
    #[serde(rename = "compact,delete")]
    CompactCommaDelete,
}

impl Default for LogCleanupPolicy {
    fn default() -> LogCleanupPolicy {
        Self::Delete
    }
}
