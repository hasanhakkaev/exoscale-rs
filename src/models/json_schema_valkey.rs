/*
 * Exoscale Public API
 *
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct JsonSchemaValkey {
    #[serde(rename = "ssl", skip_serializing_if = "Option::is_none")]
    pub ssl: Option<bool>,
    #[serde(rename = "lfu_log_factor", skip_serializing_if = "Option::is_none")]
    pub lfu_log_factor: Option<u8>,
    #[serde(rename = "maxmemory_policy", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub maxmemory_policy: Option<Option<MaxmemoryPolicy>>,
    /// Set Valkey IO thread count. Changing this will cause a restart of the Valkey service.
    #[serde(rename = "io_threads", skip_serializing_if = "Option::is_none")]
    pub io_threads: Option<u8>,
    #[serde(rename = "lfu_decay_time", skip_serializing_if = "Option::is_none")]
    pub lfu_decay_time: Option<u8>,
    /// Set output buffer limit for pub / sub clients in MB. The value is the hard limit, the soft limit is 1/4 of the hard limit. When setting the limit, be mindful of the available memory in the selected service plan.
    #[serde(rename = "pubsub_client_output_buffer_limit", skip_serializing_if = "Option::is_none")]
    pub pubsub_client_output_buffer_limit: Option<u16>,
    #[serde(rename = "notify_keyspace_events", skip_serializing_if = "Option::is_none")]
    pub notify_keyspace_events: Option<String>,
    /// When persistence is 'rdb', Valkey does RDB dumps each 10 minutes if any key is changed. Also RDB dumps are done according to backup schedule for backup purposes. When persistence is 'off', no RDB dumps and backups are done, so data can be lost at any moment if service is restarted for any reason, or if service is powered off. Also service can't be forked.
    #[serde(rename = "persistence", skip_serializing_if = "Option::is_none")]
    pub persistence: Option<Persistence>,
    #[serde(rename = "timeout", skip_serializing_if = "Option::is_none")]
    pub timeout: Option<u32>,
    /// Determines default pub/sub channels' ACL for new users if ACL is not supplied. When this option is not defined, all_channels is assumed to keep backward compatibility. This option doesn't affect Valkey configuration acl-pubsub-default.
    #[serde(rename = "acl_channels_default", skip_serializing_if = "Option::is_none")]
    pub acl_channels_default: Option<AclChannelsDefault>,
    /// Set number of Valkey databases. Changing this will cause a restart of the Valkey service.
    #[serde(rename = "number_of_databases", skip_serializing_if = "Option::is_none")]
    pub number_of_databases: Option<u8>,
}

impl JsonSchemaValkey {
    pub fn new() -> JsonSchemaValkey {
        JsonSchemaValkey {
            ssl: None,
            lfu_log_factor: None,
            maxmemory_policy: None,
            io_threads: None,
            lfu_decay_time: None,
            pubsub_client_output_buffer_limit: None,
            notify_keyspace_events: None,
            persistence: None,
            timeout: None,
            acl_channels_default: None,
            number_of_databases: None,
        }
    }
}
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MaxmemoryPolicy {
    #[serde(rename = "noeviction")]
    Noeviction,
    #[serde(rename = "allkeys-lru")]
    AllkeysLru,
    #[serde(rename = "volatile-lru")]
    VolatileLru,
    #[serde(rename = "allkeys-random")]
    AllkeysRandom,
    #[serde(rename = "volatile-random")]
    VolatileRandom,
    #[serde(rename = "volatile-ttl")]
    VolatileTtl,
    #[serde(rename = "volatile-lfu")]
    VolatileLfu,
    #[serde(rename = "allkeys-lfu")]
    AllkeysLfu,
}

impl Default for MaxmemoryPolicy {
    fn default() -> MaxmemoryPolicy {
        Self::Noeviction
    }
}
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Persistence {
    #[serde(rename = "off")]
    Off,
    #[serde(rename = "rdb")]
    Rdb,
}

impl Default for Persistence {
    fn default() -> Persistence {
        Self::Off
    }
}
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AclChannelsDefault {
    #[serde(rename = "allchannels")]
    Allchannels,
    #[serde(rename = "resetchannels")]
    Resetchannels,
}

impl Default for AclChannelsDefault {
    fn default() -> AclChannelsDefault {
        Self::Allchannels
    }
}

