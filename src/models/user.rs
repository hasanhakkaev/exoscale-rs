/*
 * Exoscale Public API
 *
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 * Generated by: https://openapi-generator.tech
 */
use crate::models;

/// User : User
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct User {
    /// SSO enabled
    #[serde(rename = "sso", skip_serializing_if = "Option::is_none")]
    pub sso: Option<bool>,
    /// Two Factor Authentication enabled
    #[serde(
        rename = "two-factor-authentication",
        skip_serializing_if = "Option::is_none"
    )]
    pub two_factor_authentication: Option<bool>,
    /// User Email
    #[serde(rename = "email")]
    pub email: String,
    /// User ID
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<uuid::Uuid>,
    #[serde(rename = "role")]
    pub role: Box<models::IamRole>,
    /// True if the user has not yet created an Exoscale account
    #[serde(rename = "pending", skip_serializing_if = "Option::is_none")]
    pub pending: Option<bool>,
}

impl User {
    /// User
    pub fn new(email: String, role: models::IamRole) -> User {
        User {
            sso: None,
            two_factor_authentication: None,
            email,
            id: None,
            role: Box::new(role),
            pending: None,
        }
    }
}
