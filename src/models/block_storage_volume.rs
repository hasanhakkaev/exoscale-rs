/*
 * Exoscale Public API
 *
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct BlockStorageVolume {
    #[serde(rename = "labels", skip_serializing_if = "Option::is_none")]
    pub labels: Option<std::collections::HashMap<String, String>>,
    #[serde(rename = "instance", skip_serializing_if = "Option::is_none")]
    pub instance: Option<Box<models::InstanceTarget>>,
    /// Volume name
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Volume state
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<State>,
    /// Volume size
    #[serde(rename = "size", skip_serializing_if = "Option::is_none")]
    pub size: Option<u64>,
    /// Volume block size
    #[serde(rename = "blocksize", skip_serializing_if = "Option::is_none")]
    pub blocksize: Option<u64>,
    /// Volume snapshots, if any
    #[serde(rename = "block-storage-snapshots", skip_serializing_if = "Option::is_none")]
    pub block_storage_snapshots: Option<Vec<models::BlockStorageSnapshotTarget>>,
    /// Volume ID
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<uuid::Uuid>,
    /// Volume creation date
    #[serde(rename = "created-at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
}

impl BlockStorageVolume {
    /// Block storage volume
    pub fn new() -> BlockStorageVolume {
        BlockStorageVolume {
            labels: None,
            instance: None,
            name: None,
            state: None,
            size: None,
            blocksize: None,
            block_storage_snapshots: None,
            id: None,
            created_at: None,
        }
    }
}
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "snapshotting")]
    Snapshotting,
    #[serde(rename = "deleted")]
    Deleted,
    #[serde(rename = "creating")]
    Creating,
    #[serde(rename = "detached")]
    Detached,
    #[serde(rename = "deleting")]
    Deleting,
    #[serde(rename = "attaching")]
    Attaching,
    #[serde(rename = "error")]
    Error,
    #[serde(rename = "attached")]
    Attached,
    #[serde(rename = "detaching")]
    Detaching,
}

impl Default for State {
    fn default() -> State {
        Self::Snapshotting
    }
}

