/*
 * Exoscale Public API
 *
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 * Generated by: https://openapi-generator.tech
 */

use reqwest;

use super::{configuration, Error};
use crate::apis::ResponseContent;
use crate::sign_request;

/// struct for passing parameters to the method [`attach_instance_to_private_network`]
#[derive(Clone, Debug)]
pub struct AttachInstanceToPrivateNetworkParams {
    pub id: String,
    pub attach_instance_to_private_network_request:
        crate::models::AttachInstanceToPrivateNetworkRequest,
}

/// struct for passing parameters to the method [`create_private_network`]
#[derive(Clone, Debug)]
pub struct CreatePrivateNetworkParams {
    pub create_private_network_request: crate::models::CreatePrivateNetworkRequest,
}

/// struct for passing parameters to the method [`delete_private_network`]
#[derive(Clone, Debug)]
pub struct DeletePrivateNetworkParams {
    pub id: String,
}

/// struct for passing parameters to the method [`detach_instance_from_private_network`]
#[derive(Clone, Debug)]
pub struct DetachInstanceFromPrivateNetworkParams {
    pub id: String,
    pub detach_instance_from_private_network_request:
        crate::models::DetachInstanceFromPrivateNetworkRequest,
}

/// struct for passing parameters to the method [`get_private_network`]
#[derive(Clone, Debug)]
pub struct GetPrivateNetworkParams {
    pub id: String,
}

/// struct for passing parameters to the method [`reset_private_network_field`]
#[derive(Clone, Debug)]
pub struct ResetPrivateNetworkFieldParams {
    pub id: String,
    pub field: String,
}

/// struct for passing parameters to the method [`update_private_network`]
#[derive(Clone, Debug)]
pub struct UpdatePrivateNetworkParams {
    pub id: String,
    pub update_private_network_request: crate::models::UpdatePrivateNetworkRequest,
}

/// struct for passing parameters to the method [`update_private_network_instance_ip`]
#[derive(Clone, Debug)]
pub struct UpdatePrivateNetworkInstanceIpParams {
    pub id: String,
    pub update_private_network_instance_ip_request:
        crate::models::UpdatePrivateNetworkInstanceIpRequest,
}

/// struct for typed errors of method [`attach_instance_to_private_network`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AttachInstanceToPrivateNetworkError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_private_network`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreatePrivateNetworkError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_private_network`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeletePrivateNetworkError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`detach_instance_from_private_network`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DetachInstanceFromPrivateNetworkError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_private_network`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetPrivateNetworkError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_private_networks`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListPrivateNetworksError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`reset_private_network_field`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ResetPrivateNetworkFieldError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_private_network`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdatePrivateNetworkError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_private_network_instance_ip`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdatePrivateNetworkInstanceIpError {
    UnknownValue(serde_json::Value),
}

///
pub async fn attach_instance_to_private_network(
    configuration: &configuration::Configuration,
    params: AttachInstanceToPrivateNetworkParams,
) -> Result<crate::models::Operation, Error<AttachInstanceToPrivateNetworkError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;
    let attach_instance_to_private_network_request =
        params.attach_instance_to_private_network_request;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/private-network/{id}:attach",
        local_var_configuration.base_path,
        id = crate::apis::urlencode(id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    if let Some(ref local_var_user_agent) = local_var_configuration.content_type {
        local_var_req_builder = local_var_req_builder
            .header(reqwest::header::CONTENT_TYPE, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&attach_instance_to_private_network_request);

    let mut local_var_req = local_var_req_builder.build()?;
    let _ = sign_request(&mut local_var_req, configuration);
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AttachInstanceToPrivateNetworkError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

///
pub async fn create_private_network(
    configuration: &configuration::Configuration,
    params: CreatePrivateNetworkParams,
) -> Result<crate::models::Operation, Error<CreatePrivateNetworkError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let create_private_network_request = params.create_private_network_request;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/private-network", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    if let Some(ref local_var_user_agent) = local_var_configuration.content_type {
        local_var_req_builder = local_var_req_builder
            .header(reqwest::header::CONTENT_TYPE, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&create_private_network_request);

    let mut local_var_req = local_var_req_builder.build()?;
    let _ = sign_request(&mut local_var_req, configuration);
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CreatePrivateNetworkError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

///
pub async fn delete_private_network(
    configuration: &configuration::Configuration,
    params: DeletePrivateNetworkParams,
) -> Result<crate::models::Operation, Error<DeletePrivateNetworkError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/private-network/{id}",
        local_var_configuration.base_path,
        id = crate::apis::urlencode(id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    if let Some(ref local_var_user_agent) = local_var_configuration.content_type {
        local_var_req_builder = local_var_req_builder
            .header(reqwest::header::CONTENT_TYPE, local_var_user_agent.clone());
    }

    let mut local_var_req = local_var_req_builder.build()?;
    let _ = sign_request(&mut local_var_req, configuration);
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DeletePrivateNetworkError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

///
pub async fn detach_instance_from_private_network(
    configuration: &configuration::Configuration,
    params: DetachInstanceFromPrivateNetworkParams,
) -> Result<crate::models::Operation, Error<DetachInstanceFromPrivateNetworkError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;
    let detach_instance_from_private_network_request =
        params.detach_instance_from_private_network_request;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/private-network/{id}:detach",
        local_var_configuration.base_path,
        id = crate::apis::urlencode(id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    if let Some(ref local_var_user_agent) = local_var_configuration.content_type {
        local_var_req_builder = local_var_req_builder
            .header(reqwest::header::CONTENT_TYPE, local_var_user_agent.clone());
    }
    local_var_req_builder =
        local_var_req_builder.json(&detach_instance_from_private_network_request);

    let mut local_var_req = local_var_req_builder.build()?;
    let _ = sign_request(&mut local_var_req, configuration);
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DetachInstanceFromPrivateNetworkError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

///
pub async fn get_private_network(
    configuration: &configuration::Configuration,
    params: GetPrivateNetworkParams,
) -> Result<crate::models::PrivateNetwork, Error<GetPrivateNetworkError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/private-network/{id}",
        local_var_configuration.base_path,
        id = crate::apis::urlencode(id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    if let Some(ref local_var_user_agent) = local_var_configuration.content_type {
        local_var_req_builder = local_var_req_builder
            .header(reqwest::header::CONTENT_TYPE, local_var_user_agent.clone());
    }

    let mut local_var_req = local_var_req_builder.build()?;
    let _ = sign_request(&mut local_var_req, configuration);
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetPrivateNetworkError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

///
pub async fn list_private_networks(
    configuration: &configuration::Configuration,
) -> Result<crate::models::ListPrivateNetworks200Response, Error<ListPrivateNetworksError>> {
    let local_var_configuration = configuration;

    // unbox the parameters

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/private-network", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    if let Some(ref local_var_user_agent) = local_var_configuration.content_type {
        local_var_req_builder = local_var_req_builder
            .header(reqwest::header::CONTENT_TYPE, local_var_user_agent.clone());
    }

    let mut local_var_req = local_var_req_builder.build()?;
    let _ = sign_request(&mut local_var_req, configuration);
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListPrivateNetworksError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

///
pub async fn reset_private_network_field(
    configuration: &configuration::Configuration,
    params: ResetPrivateNetworkFieldParams,
) -> Result<crate::models::Operation, Error<ResetPrivateNetworkFieldError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;
    let field = params.field;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/private-network/{id}/{field}",
        local_var_configuration.base_path,
        id = crate::apis::urlencode(id),
        field = crate::apis::urlencode(field)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    if let Some(ref local_var_user_agent) = local_var_configuration.content_type {
        local_var_req_builder = local_var_req_builder
            .header(reqwest::header::CONTENT_TYPE, local_var_user_agent.clone());
    }

    let mut local_var_req = local_var_req_builder.build()?;
    let _ = sign_request(&mut local_var_req, configuration);
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ResetPrivateNetworkFieldError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

///
pub async fn update_private_network(
    configuration: &configuration::Configuration,
    params: UpdatePrivateNetworkParams,
) -> Result<crate::models::Operation, Error<UpdatePrivateNetworkError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;
    let update_private_network_request = params.update_private_network_request;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/private-network/{id}",
        local_var_configuration.base_path,
        id = crate::apis::urlencode(id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    if let Some(ref local_var_user_agent) = local_var_configuration.content_type {
        local_var_req_builder = local_var_req_builder
            .header(reqwest::header::CONTENT_TYPE, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&update_private_network_request);

    let mut local_var_req = local_var_req_builder.build()?;
    let _ = sign_request(&mut local_var_req, configuration);
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UpdatePrivateNetworkError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

///
pub async fn update_private_network_instance_ip(
    configuration: &configuration::Configuration,
    params: UpdatePrivateNetworkInstanceIpParams,
) -> Result<crate::models::Operation, Error<UpdatePrivateNetworkInstanceIpError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;
    let update_private_network_instance_ip_request =
        params.update_private_network_instance_ip_request;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/private-network/{id}:update-ip",
        local_var_configuration.base_path,
        id = crate::apis::urlencode(id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    if let Some(ref local_var_user_agent) = local_var_configuration.content_type {
        local_var_req_builder = local_var_req_builder
            .header(reqwest::header::CONTENT_TYPE, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&update_private_network_instance_ip_request);

    let mut local_var_req = local_var_req_builder.build()?;
    let _ = sign_request(&mut local_var_req, configuration);
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UpdatePrivateNetworkInstanceIpError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
