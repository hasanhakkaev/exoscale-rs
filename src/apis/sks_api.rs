/*
 * Exoscale Public API
 *
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 * Generated by: https://openapi-generator.tech
 */

use reqwest;
use serde::{Deserialize, Serialize};
use crate::{models, utils,apis::ResponseContent};
use super::{Error, configuration};


/// struct for typed errors of method [`create_sks_cluster`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateSksClusterError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`create_sks_nodepool`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateSksNodepoolError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`delete_sks_cluster`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteSksClusterError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`delete_sks_nodepool`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteSksNodepoolError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`evict_sks_nodepool_members`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EvictSksNodepoolMembersError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`generate_sks_cluster_kubeconfig`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GenerateSksClusterKubeconfigError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`get_sks_cluster`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSksClusterError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`get_sks_cluster_authority_cert`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSksClusterAuthorityCertError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`get_sks_cluster_inspection`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSksClusterInspectionError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`get_sks_nodepool`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSksNodepoolError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`list_sks_cluster_deprecated_resources`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListSksClusterDeprecatedResourcesError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`list_sks_cluster_versions`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListSksClusterVersionsError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`list_sks_clusters`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListSksClustersError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`reset_sks_cluster_field`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ResetSksClusterFieldError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`reset_sks_nodepool_field`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ResetSksNodepoolFieldError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`rotate_sks_ccm_credentials`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RotateSksCcmCredentialsError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`rotate_sks_csi_credentials`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RotateSksCsiCredentialsError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`rotate_sks_operators_ca`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RotateSksOperatorsCaError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`scale_sks_nodepool`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ScaleSksNodepoolError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`update_sks_cluster`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateSksClusterError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`update_sks_nodepool`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateSksNodepoolError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`upgrade_sks_cluster`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpgradeSksClusterError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`upgrade_sks_cluster_service_level`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpgradeSksClusterServiceLevelError {
    UnknownValue(serde_json::Value),
}


pub async fn create_sks_cluster(configuration: &configuration::Configuration, create_sks_cluster_request: models::CreateSksClusterRequest) -> Result<models::Operation, Error<CreateSksClusterError>> {
    let local_var_create_sks_cluster_request = create_sks_cluster_request;

    let path_params_map = std::collections::HashMap::new();

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
            let body_payload_option = Some(local_var_create_sks_cluster_request);

    utils::execute_request(
    configuration,
    reqwest::Method::POST,
    "/sks-cluster",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn create_sks_nodepool(configuration: &configuration::Configuration, id: String, create_sks_nodepool_request: models::CreateSksNodepoolRequest) -> Result<models::Operation, Error<CreateSksNodepoolError>> {
    let local_var_id = id;
    let local_var_create_sks_nodepool_request = create_sks_nodepool_request;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(local_var_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
            let body_payload_option = Some(local_var_create_sks_nodepool_request);

    utils::execute_request(
    configuration,
    reqwest::Method::POST,
    "/sks-cluster/{id}/nodepool",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn delete_sks_cluster(configuration: &configuration::Configuration, id: String) -> Result<models::Operation, Error<DeleteSksClusterError>> {
    let local_var_id = id;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(local_var_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
        let body_payload_option: Option<()> = None;

    utils::execute_request(
    configuration,
    reqwest::Method::DELETE,
    "/sks-cluster/{id}",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn delete_sks_nodepool(configuration: &configuration::Configuration, id: String, sks_nodepool_id: String) -> Result<models::Operation, Error<DeleteSksNodepoolError>> {
    let local_var_id = id;
    let local_var_sks_nodepool_id = sks_nodepool_id;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(local_var_id));
                path_params_map.insert("sks_nodepool_id".to_string(), crate::apis::urlencode(local_var_sks_nodepool_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
        let body_payload_option: Option<()> = None;

    utils::execute_request(
    configuration,
    reqwest::Method::DELETE,
    "/sks-cluster/{id}/nodepool/{sks_nodepool_id}",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn evict_sks_nodepool_members(configuration: &configuration::Configuration, id: String, sks_nodepool_id: String, evict_sks_nodepool_members_request: models::EvictSksNodepoolMembersRequest) -> Result<models::Operation, Error<EvictSksNodepoolMembersError>> {
    let local_var_id = id;
    let local_var_sks_nodepool_id = sks_nodepool_id;
    let local_var_evict_sks_nodepool_members_request = evict_sks_nodepool_members_request;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(local_var_id));
                path_params_map.insert("sks_nodepool_id".to_string(), crate::apis::urlencode(local_var_sks_nodepool_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
            let body_payload_option = Some(local_var_evict_sks_nodepool_members_request);

    utils::execute_request(
    configuration,
    reqwest::Method::PUT,
    "/sks-cluster/{id}/nodepool/{sks_nodepool_id}:evict",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn generate_sks_cluster_kubeconfig(configuration: &configuration::Configuration, id: String, sks_kubeconfig_request: models::SksKubeconfigRequest) -> Result<models::GenerateSksClusterKubeconfig200Response, Error<GenerateSksClusterKubeconfigError>> {
    let local_var_id = id;
    let local_var_sks_kubeconfig_request = sks_kubeconfig_request;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(local_var_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
            let body_payload_option = Some(local_var_sks_kubeconfig_request);

    utils::execute_request(
    configuration,
    reqwest::Method::POST,
    "/sks-cluster-kubeconfig/{id}",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn get_sks_cluster(configuration: &configuration::Configuration, id: String) -> Result<models::SksCluster, Error<GetSksClusterError>> {
    let local_var_id = id;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(local_var_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
        let body_payload_option: Option<()> = None;

    utils::execute_request(
    configuration,
    reqwest::Method::GET,
    "/sks-cluster/{id}",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn get_sks_cluster_authority_cert(configuration: &configuration::Configuration, id: String, authority: &str) -> Result<models::GetSksClusterAuthorityCert200Response, Error<GetSksClusterAuthorityCertError>> {
    let local_var_id = id;
    let local_var_authority = authority;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(local_var_id));
                path_params_map.insert("authority".to_string(), crate::apis::urlencode(local_var_authority));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
        let body_payload_option: Option<()> = None;

    utils::execute_request(
    configuration,
    reqwest::Method::GET,
    "/sks-cluster/{id}/authority/{authority}/cert",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn get_sks_cluster_inspection(configuration: &configuration::Configuration, id: String) -> Result<std::collections::HashMap<String, serde_json::Value>, Error<GetSksClusterInspectionError>> {
    let local_var_id = id;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(local_var_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
        let body_payload_option: Option<()> = None;

    utils::execute_request(
    configuration,
    reqwest::Method::GET,
    "/sks-cluster/{id}/inspection",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn get_sks_nodepool(configuration: &configuration::Configuration, id: String, sks_nodepool_id: String) -> Result<models::SksNodepool, Error<GetSksNodepoolError>> {
    let local_var_id = id;
    let local_var_sks_nodepool_id = sks_nodepool_id;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(local_var_id));
                path_params_map.insert("sks_nodepool_id".to_string(), crate::apis::urlencode(local_var_sks_nodepool_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
        let body_payload_option: Option<()> = None;

    utils::execute_request(
    configuration,
    reqwest::Method::GET,
    "/sks-cluster/{id}/nodepool/{sks_nodepool_id}",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn list_sks_cluster_deprecated_resources(configuration: &configuration::Configuration, id: String) -> Result<Vec<std::collections::HashMap<String, String>>, Error<ListSksClusterDeprecatedResourcesError>> {
    let local_var_id = id;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(local_var_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
        let body_payload_option: Option<()> = None;

    utils::execute_request(
    configuration,
    reqwest::Method::GET,
    "/sks-cluster-deprecated-resources/{id}",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn list_sks_cluster_versions(configuration: &configuration::Configuration, include_deprecated: Option<&str>) -> Result<models::ListSksClusterVersions200Response, Error<ListSksClusterVersionsError>> {
    let local_var_include_deprecated = include_deprecated;

    let path_params_map = std::collections::HashMap::new();

    let mut query_params_vec: Vec<(&str, String)> = Vec::new();
                        if let Some(value) = &local_var_include_deprecated {
                            query_params_vec.push(("include-deprecated", value.to_string()));
                        }
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
        let body_payload_option: Option<()> = None;

    utils::execute_request(
    configuration,
    reqwest::Method::GET,
    "/sks-cluster-version",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn list_sks_clusters(configuration: &configuration::Configuration, ) -> Result<models::ListSksClusters200Response, Error<ListSksClustersError>> {

    let path_params_map = std::collections::HashMap::new();

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
        let body_payload_option: Option<()> = None;

    utils::execute_request(
    configuration,
    reqwest::Method::GET,
    "/sks-cluster",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn reset_sks_cluster_field(configuration: &configuration::Configuration, id: String, field: &str) -> Result<models::Operation, Error<ResetSksClusterFieldError>> {
    let local_var_id = id;
    let local_var_field = field;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(local_var_id));
                path_params_map.insert("field".to_string(), crate::apis::urlencode(local_var_field));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
        let body_payload_option: Option<()> = None;

    utils::execute_request(
    configuration,
    reqwest::Method::DELETE,
    "/sks-cluster/{id}/{field}",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn reset_sks_nodepool_field(configuration: &configuration::Configuration, id: String, sks_nodepool_id: String, field: &str) -> Result<models::Operation, Error<ResetSksNodepoolFieldError>> {
    let local_var_id = id;
    let local_var_sks_nodepool_id = sks_nodepool_id;
    let local_var_field = field;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(local_var_id));
                path_params_map.insert("sks_nodepool_id".to_string(), crate::apis::urlencode(local_var_sks_nodepool_id));
                path_params_map.insert("field".to_string(), crate::apis::urlencode(local_var_field));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
        let body_payload_option: Option<()> = None;

    utils::execute_request(
    configuration,
    reqwest::Method::DELETE,
    "/sks-cluster/{id}/nodepool/{sks_nodepool_id}/{field}",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn rotate_sks_ccm_credentials(configuration: &configuration::Configuration, id: String) -> Result<models::Operation, Error<RotateSksCcmCredentialsError>> {
    let local_var_id = id;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(local_var_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
        let body_payload_option: Option<()> = None;

    utils::execute_request(
    configuration,
    reqwest::Method::PUT,
    "/sks-cluster/{id}/rotate-ccm-credentials",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn rotate_sks_csi_credentials(configuration: &configuration::Configuration, id: String) -> Result<models::Operation, Error<RotateSksCsiCredentialsError>> {
    let local_var_id = id;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(local_var_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
        let body_payload_option: Option<()> = None;

    utils::execute_request(
    configuration,
    reqwest::Method::PUT,
    "/sks-cluster/{id}/rotate-csi-credentials",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn rotate_sks_operators_ca(configuration: &configuration::Configuration, id: String) -> Result<models::Operation, Error<RotateSksOperatorsCaError>> {
    let local_var_id = id;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(local_var_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
        let body_payload_option: Option<()> = None;

    utils::execute_request(
    configuration,
    reqwest::Method::PUT,
    "/sks-cluster/{id}/rotate-operators-ca",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn scale_sks_nodepool(configuration: &configuration::Configuration, id: String, sks_nodepool_id: String, scale_sks_nodepool_request: models::ScaleSksNodepoolRequest) -> Result<models::Operation, Error<ScaleSksNodepoolError>> {
    let local_var_id = id;
    let local_var_sks_nodepool_id = sks_nodepool_id;
    let local_var_scale_sks_nodepool_request = scale_sks_nodepool_request;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(local_var_id));
                path_params_map.insert("sks_nodepool_id".to_string(), crate::apis::urlencode(local_var_sks_nodepool_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
            let body_payload_option = Some(local_var_scale_sks_nodepool_request);

    utils::execute_request(
    configuration,
    reqwest::Method::PUT,
    "/sks-cluster/{id}/nodepool/{sks_nodepool_id}:scale",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn update_sks_cluster(configuration: &configuration::Configuration, id: String, update_sks_cluster_request: models::UpdateSksClusterRequest) -> Result<models::Operation, Error<UpdateSksClusterError>> {
    let local_var_id = id;
    let local_var_update_sks_cluster_request = update_sks_cluster_request;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(local_var_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
            let body_payload_option = Some(local_var_update_sks_cluster_request);

    utils::execute_request(
    configuration,
    reqwest::Method::PUT,
    "/sks-cluster/{id}",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn update_sks_nodepool(configuration: &configuration::Configuration, id: String, sks_nodepool_id: String, update_sks_nodepool_request: models::UpdateSksNodepoolRequest) -> Result<models::Operation, Error<UpdateSksNodepoolError>> {
    let local_var_id = id;
    let local_var_sks_nodepool_id = sks_nodepool_id;
    let local_var_update_sks_nodepool_request = update_sks_nodepool_request;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(local_var_id));
                path_params_map.insert("sks_nodepool_id".to_string(), crate::apis::urlencode(local_var_sks_nodepool_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
            let body_payload_option = Some(local_var_update_sks_nodepool_request);

    utils::execute_request(
    configuration,
    reqwest::Method::PUT,
    "/sks-cluster/{id}/nodepool/{sks_nodepool_id}",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn upgrade_sks_cluster(configuration: &configuration::Configuration, id: String, upgrade_sks_cluster_request: models::UpgradeSksClusterRequest) -> Result<models::Operation, Error<UpgradeSksClusterError>> {
    let local_var_id = id;
    let local_var_upgrade_sks_cluster_request = upgrade_sks_cluster_request;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(local_var_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
            let body_payload_option = Some(local_var_upgrade_sks_cluster_request);

    utils::execute_request(
    configuration,
    reqwest::Method::PUT,
    "/sks-cluster/{id}/upgrade",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn upgrade_sks_cluster_service_level(configuration: &configuration::Configuration, id: String) -> Result<models::Operation, Error<UpgradeSksClusterServiceLevelError>> {
    let local_var_id = id;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(local_var_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
        let body_payload_option: Option<()> = None;

    utils::execute_request(
    configuration,
    reqwest::Method::PUT,
    "/sks-cluster/{id}/upgrade-service-level",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
