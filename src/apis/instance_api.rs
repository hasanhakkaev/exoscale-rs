/*
 * Exoscale Public API
 *
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 * Generated by: https://openapi-generator.tech
 */

use reqwest;
use serde::{Deserialize, Serialize};
use crate::{models, utils,apis::ResponseContent};
use super::{Error, configuration};


/// struct for typed errors of method [`add_instance_protection`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AddInstanceProtectionError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`create_instance`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateInstanceError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`create_snapshot`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateSnapshotError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`delete_instance`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteInstanceError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`enable_tpm`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EnableTpmError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`get_console_proxy_url`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetConsoleProxyUrlError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`get_instance`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetInstanceError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`list_instances`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListInstancesError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`reboot_instance`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RebootInstanceError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`remove_instance_protection`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RemoveInstanceProtectionError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`reset_instance`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ResetInstanceError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`reset_instance_field`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ResetInstanceFieldError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`reset_instance_password`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ResetInstancePasswordError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`resize_instance_disk`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ResizeInstanceDiskError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`reveal_instance_password`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RevealInstancePasswordError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`revert_instance_to_snapshot`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RevertInstanceToSnapshotError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`scale_instance`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ScaleInstanceError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`start_instance`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum StartInstanceError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`stop_instance`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum StopInstanceError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`update_instance`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateInstanceError {
    UnknownValue(serde_json::Value),
}


pub async fn add_instance_protection(configuration: &configuration::Configuration, id: String) -> Result<models::Operation, Error<AddInstanceProtectionError>> {
    let local_var_id = id;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(local_var_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
        let body_payload_option: Option<()> = None;

    utils::execute_request(
    configuration,
    reqwest::Method::PUT,
    "/instance/{id}:add-protection",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn create_instance(configuration: &configuration::Configuration, create_instance_request: models::CreateInstanceRequest) -> Result<models::Operation, Error<CreateInstanceError>> {
    let local_var_create_instance_request = create_instance_request;

    let path_params_map = std::collections::HashMap::new();

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
            let body_payload_option = Some(local_var_create_instance_request);

    utils::execute_request(
    configuration,
    reqwest::Method::POST,
    "/instance",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn create_snapshot(configuration: &configuration::Configuration, id: String) -> Result<models::Operation, Error<CreateSnapshotError>> {
    let local_var_id = id;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(local_var_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
        let body_payload_option: Option<()> = None;

    utils::execute_request(
    configuration,
    reqwest::Method::POST,
    "/instance/{id}:create-snapshot",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn delete_instance(configuration: &configuration::Configuration, id: String) -> Result<models::Operation, Error<DeleteInstanceError>> {
    let local_var_id = id;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(local_var_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
        let body_payload_option: Option<()> = None;

    utils::execute_request(
    configuration,
    reqwest::Method::DELETE,
    "/instance/{id}",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn enable_tpm(configuration: &configuration::Configuration, id: String) -> Result<models::Operation, Error<EnableTpmError>> {
    let local_var_id = id;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(local_var_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
        let body_payload_option: Option<()> = None;

    utils::execute_request(
    configuration,
    reqwest::Method::POST,
    "/instance/{id}:enable-tpm",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn get_console_proxy_url(configuration: &configuration::Configuration, id: String) -> Result<models::GetConsoleProxyUrl200Response, Error<GetConsoleProxyUrlError>> {
    let local_var_id = id;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(local_var_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
        let body_payload_option: Option<()> = None;

    utils::execute_request(
    configuration,
    reqwest::Method::GET,
    "/console/{id}",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn get_instance(configuration: &configuration::Configuration, id: String) -> Result<models::Instance, Error<GetInstanceError>> {
    let local_var_id = id;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(local_var_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
        let body_payload_option: Option<()> = None;

    utils::execute_request(
    configuration,
    reqwest::Method::GET,
    "/instance/{id}",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn list_instances(configuration: &configuration::Configuration, manager_id: Option<String>, manager_type: Option<&str>, ip_address: Option<&str>) -> Result<models::ListInstances200Response, Error<ListInstancesError>> {
    let local_var_manager_id = manager_id;
    let local_var_manager_type = manager_type;
    let local_var_ip_address = ip_address;

    let path_params_map = std::collections::HashMap::new();

    let mut query_params_vec: Vec<(&str, String)> = Vec::new();
                        if let Some(value) = &local_var_manager_id {
                            query_params_vec.push(("manager-id", value.to_string()));
                        }
                        if let Some(value) = &local_var_manager_type {
                            query_params_vec.push(("manager-type", value.to_string()));
                        }
                        if let Some(value) = &local_var_ip_address {
                            query_params_vec.push(("ip-address", value.to_string()));
                        }
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
        let body_payload_option: Option<()> = None;

    utils::execute_request(
    configuration,
    reqwest::Method::GET,
    "/instance",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn reboot_instance(configuration: &configuration::Configuration, id: String) -> Result<models::Operation, Error<RebootInstanceError>> {
    let local_var_id = id;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(local_var_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
        let body_payload_option: Option<()> = None;

    utils::execute_request(
    configuration,
    reqwest::Method::PUT,
    "/instance/{id}:reboot",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn remove_instance_protection(configuration: &configuration::Configuration, id: String) -> Result<models::Operation, Error<RemoveInstanceProtectionError>> {
    let local_var_id = id;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(local_var_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
        let body_payload_option: Option<()> = None;

    utils::execute_request(
    configuration,
    reqwest::Method::PUT,
    "/instance/{id}:remove-protection",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn reset_instance(configuration: &configuration::Configuration, id: String, reset_instance_request: models::ResetInstanceRequest) -> Result<models::Operation, Error<ResetInstanceError>> {
    let local_var_id = id;
    let local_var_reset_instance_request = reset_instance_request;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(local_var_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
            let body_payload_option = Some(local_var_reset_instance_request);

    utils::execute_request(
    configuration,
    reqwest::Method::PUT,
    "/instance/{id}:reset",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn reset_instance_field(configuration: &configuration::Configuration, id: String, field: &str) -> Result<models::Operation, Error<ResetInstanceFieldError>> {
    let local_var_id = id;
    let local_var_field = field;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(local_var_id));
                path_params_map.insert("field".to_string(), crate::apis::urlencode(local_var_field));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
        let body_payload_option: Option<()> = None;

    utils::execute_request(
    configuration,
    reqwest::Method::DELETE,
    "/instance/{id}/{field}",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn reset_instance_password(configuration: &configuration::Configuration, id: String) -> Result<models::Operation, Error<ResetInstancePasswordError>> {
    let local_var_id = id;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(local_var_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
        let body_payload_option: Option<()> = None;

    utils::execute_request(
    configuration,
    reqwest::Method::PUT,
    "/instance/{id}:reset-password",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn resize_instance_disk(configuration: &configuration::Configuration, id: String, resize_instance_disk_request: models::ResizeInstanceDiskRequest) -> Result<models::Operation, Error<ResizeInstanceDiskError>> {
    let local_var_id = id;
    let local_var_resize_instance_disk_request = resize_instance_disk_request;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(local_var_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
            let body_payload_option = Some(local_var_resize_instance_disk_request);

    utils::execute_request(
    configuration,
    reqwest::Method::PUT,
    "/instance/{id}:resize-disk",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn reveal_instance_password(configuration: &configuration::Configuration, id: String) -> Result<models::InstancePassword, Error<RevealInstancePasswordError>> {
    let local_var_id = id;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(local_var_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
        let body_payload_option: Option<()> = None;

    utils::execute_request(
    configuration,
    reqwest::Method::GET,
    "/instance/{id}:password",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn revert_instance_to_snapshot(configuration: &configuration::Configuration, instance_id: String, revert_instance_to_snapshot_request: models::RevertInstanceToSnapshotRequest) -> Result<models::Operation, Error<RevertInstanceToSnapshotError>> {
    let local_var_instance_id = instance_id;
    let local_var_revert_instance_to_snapshot_request = revert_instance_to_snapshot_request;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("instance_id".to_string(), crate::apis::urlencode(local_var_instance_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
            let body_payload_option = Some(local_var_revert_instance_to_snapshot_request);

    utils::execute_request(
    configuration,
    reqwest::Method::POST,
    "/instance/{instance_id}:revert-snapshot",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn scale_instance(configuration: &configuration::Configuration, id: String, scale_instance_request: models::ScaleInstanceRequest) -> Result<models::Operation, Error<ScaleInstanceError>> {
    let local_var_id = id;
    let local_var_scale_instance_request = scale_instance_request;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(local_var_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
            let body_payload_option = Some(local_var_scale_instance_request);

    utils::execute_request(
    configuration,
    reqwest::Method::PUT,
    "/instance/{id}:scale",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn start_instance(configuration: &configuration::Configuration, id: String, start_instance_request: models::StartInstanceRequest) -> Result<models::Operation, Error<StartInstanceError>> {
    let local_var_id = id;
    let local_var_start_instance_request = start_instance_request;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(local_var_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
            let body_payload_option = Some(local_var_start_instance_request);

    utils::execute_request(
    configuration,
    reqwest::Method::PUT,
    "/instance/{id}:start",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn stop_instance(configuration: &configuration::Configuration, id: String) -> Result<models::Operation, Error<StopInstanceError>> {
    let local_var_id = id;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(local_var_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
        let body_payload_option: Option<()> = None;

    utils::execute_request(
    configuration,
    reqwest::Method::PUT,
    "/instance/{id}:stop",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn update_instance(configuration: &configuration::Configuration, id: String, update_instance_request: models::UpdateInstanceRequest) -> Result<models::Operation, Error<UpdateInstanceError>> {
    let local_var_id = id;
    let local_var_update_instance_request = update_instance_request;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(local_var_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
            let body_payload_option = Some(local_var_update_instance_request);

    utils::execute_request(
    configuration,
    reqwest::Method::PUT,
    "/instance/{id}",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
