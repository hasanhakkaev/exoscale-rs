/*
 * Exoscale Public API
 *
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 * Generated by: https://openapi-generator.tech
 */

use reqwest;
use serde::{Deserialize, Serialize};
use crate::{models, utils,apis::ResponseContent};
use super::{Error, configuration};


/// struct for typed errors of method [`attach_instance_to_elastic_ip`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AttachInstanceToElasticIpError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`create_elastic_ip`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateElasticIpError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`delete_elastic_ip`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteElasticIpError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`detach_instance_from_elastic_ip`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DetachInstanceFromElasticIpError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`get_elastic_ip`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetElasticIpError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`list_elastic_ips`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListElasticIpsError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`reset_elastic_ip_field`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ResetElasticIpFieldError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`update_elastic_ip`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateElasticIpError {
    UnknownValue(serde_json::Value),
}


pub async fn attach_instance_to_elastic_ip(configuration: &configuration::Configuration, id: String, attach_block_storage_volume_to_instance_request: models::AttachBlockStorageVolumeToInstanceRequest) -> Result<models::Operation, Error<AttachInstanceToElasticIpError>> {
    let local_var_id = id;
    let local_var_attach_block_storage_volume_to_instance_request = attach_block_storage_volume_to_instance_request;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(&local_var_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
            let body_payload_option = Some(local_var_attach_block_storage_volume_to_instance_request);

    utils::execute_request(
    configuration,
    reqwest::Method::PUT,
    "/elastic-ip/{id}:attach",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn create_elastic_ip(configuration: &configuration::Configuration, create_elastic_ip_request: models::CreateElasticIpRequest) -> Result<models::Operation, Error<CreateElasticIpError>> {
    let local_var_create_elastic_ip_request = create_elastic_ip_request;

    let path_params_map = std::collections::HashMap::new();

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
            let body_payload_option = Some(local_var_create_elastic_ip_request);

    utils::execute_request(
    configuration,
    reqwest::Method::POST,
    "/elastic-ip",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn delete_elastic_ip(configuration: &configuration::Configuration, id: String) -> Result<models::Operation, Error<DeleteElasticIpError>> {
    let local_var_id = id;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(&local_var_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
        let body_payload_option: Option<()> = None;

    utils::execute_request(
    configuration,
    reqwest::Method::DELETE,
    "/elastic-ip/{id}",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn detach_instance_from_elastic_ip(configuration: &configuration::Configuration, id: String, attach_block_storage_volume_to_instance_request: models::AttachBlockStorageVolumeToInstanceRequest) -> Result<models::Operation, Error<DetachInstanceFromElasticIpError>> {
    let local_var_id = id;
    let local_var_attach_block_storage_volume_to_instance_request = attach_block_storage_volume_to_instance_request;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(&local_var_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
            let body_payload_option = Some(local_var_attach_block_storage_volume_to_instance_request);

    utils::execute_request(
    configuration,
    reqwest::Method::PUT,
    "/elastic-ip/{id}:detach",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn get_elastic_ip(configuration: &configuration::Configuration, id: String) -> Result<models::ElasticIp, Error<GetElasticIpError>> {
    let local_var_id = id;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(&local_var_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
        let body_payload_option: Option<()> = None;

    utils::execute_request(
    configuration,
    reqwest::Method::GET,
    "/elastic-ip/{id}",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn list_elastic_ips(configuration: &configuration::Configuration, ) -> Result<models::ListElasticIps200Response, Error<ListElasticIpsError>> {

    let path_params_map = std::collections::HashMap::new();

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
        let body_payload_option: Option<()> = None;

    utils::execute_request(
    configuration,
    reqwest::Method::GET,
    "/elastic-ip",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn reset_elastic_ip_field(configuration: &configuration::Configuration, id: String, field: &str) -> Result<models::Operation, Error<ResetElasticIpFieldError>> {
    let local_var_id = id;
    let local_var_field = field;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(&local_var_id));
                path_params_map.insert("field".to_string(), crate::apis::urlencode(&local_var_field));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
        let body_payload_option: Option<()> = None;

    utils::execute_request(
    configuration,
    reqwest::Method::DELETE,
    "/elastic-ip/{id}/{field}",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn update_elastic_ip(configuration: &configuration::Configuration, id: String, update_elastic_ip_request: models::UpdateElasticIpRequest) -> Result<models::Operation, Error<UpdateElasticIpError>> {
    let local_var_id = id;
    let local_var_update_elastic_ip_request = update_elastic_ip_request;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(&local_var_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
            let body_payload_option = Some(local_var_update_elastic_ip_request);

    utils::execute_request(
    configuration,
    reqwest::Method::PUT,
    "/elastic-ip/{id}",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
