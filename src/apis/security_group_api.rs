/*
 * Exoscale Public API
 *
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 * Generated by: https://openapi-generator.tech
 */

use reqwest;
use serde::{Deserialize, Serialize};
use crate::{models, utils,apis::ResponseContent};
use super::{Error, configuration};


/// struct for typed errors of method [`add_external_source_to_security_group`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AddExternalSourceToSecurityGroupError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`add_rule_to_security_group`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AddRuleToSecurityGroupError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`attach_instance_to_security_group`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AttachInstanceToSecurityGroupError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`create_security_group`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateSecurityGroupError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`delete_rule_from_security_group`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteRuleFromSecurityGroupError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`delete_security_group`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteSecurityGroupError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`detach_instance_from_security_group`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DetachInstanceFromSecurityGroupError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`get_security_group`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSecurityGroupError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`list_security_groups`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListSecurityGroupsError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`remove_external_source_from_security_group`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RemoveExternalSourceFromSecurityGroupError {
    UnknownValue(serde_json::Value),
}


pub async fn add_external_source_to_security_group(configuration: &configuration::Configuration, id: String, add_external_source_to_security_group_request: models::AddExternalSourceToSecurityGroupRequest) -> Result<models::Operation, Error<AddExternalSourceToSecurityGroupError>> {
    let local_var_id = id;
    let local_var_add_external_source_to_security_group_request = add_external_source_to_security_group_request;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(local_var_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
            let body_payload_option = Some(local_var_add_external_source_to_security_group_request);

    utils::execute_request(
    configuration,
    reqwest::Method::PUT,
    "/security-group/{id}:add-source",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn add_rule_to_security_group(configuration: &configuration::Configuration, id: String, add_rule_to_security_group_request: models::AddRuleToSecurityGroupRequest) -> Result<models::Operation, Error<AddRuleToSecurityGroupError>> {
    let local_var_id = id;
    let local_var_add_rule_to_security_group_request = add_rule_to_security_group_request;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(local_var_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
            let body_payload_option = Some(local_var_add_rule_to_security_group_request);

    utils::execute_request(
    configuration,
    reqwest::Method::POST,
    "/security-group/{id}/rules",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn attach_instance_to_security_group(configuration: &configuration::Configuration, id: String, detach_instance_from_private_network_request: models::DetachInstanceFromPrivateNetworkRequest) -> Result<models::Operation, Error<AttachInstanceToSecurityGroupError>> {
    let local_var_id = id;
    let local_var_detach_instance_from_private_network_request = detach_instance_from_private_network_request;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(local_var_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
            let body_payload_option = Some(local_var_detach_instance_from_private_network_request);

    utils::execute_request(
    configuration,
    reqwest::Method::PUT,
    "/security-group/{id}:attach",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn create_security_group(configuration: &configuration::Configuration, create_security_group_request: models::CreateSecurityGroupRequest) -> Result<models::Operation, Error<CreateSecurityGroupError>> {
    let local_var_create_security_group_request = create_security_group_request;

    let path_params_map = std::collections::HashMap::new();

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
            let body_payload_option = Some(local_var_create_security_group_request);

    utils::execute_request(
    configuration,
    reqwest::Method::POST,
    "/security-group",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn delete_rule_from_security_group(configuration: &configuration::Configuration, id: String, rule_id: String) -> Result<models::Operation, Error<DeleteRuleFromSecurityGroupError>> {
    let local_var_id = id;
    let local_var_rule_id = rule_id;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(local_var_id));
                path_params_map.insert("rule_id".to_string(), crate::apis::urlencode(local_var_rule_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
        let body_payload_option: Option<()> = None;

    utils::execute_request(
    configuration,
    reqwest::Method::DELETE,
    "/security-group/{id}/rules/{rule_id}",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn delete_security_group(configuration: &configuration::Configuration, id: String) -> Result<models::Operation, Error<DeleteSecurityGroupError>> {
    let local_var_id = id;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(local_var_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
        let body_payload_option: Option<()> = None;

    utils::execute_request(
    configuration,
    reqwest::Method::DELETE,
    "/security-group/{id}",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn detach_instance_from_security_group(configuration: &configuration::Configuration, id: String, detach_instance_from_private_network_request: models::DetachInstanceFromPrivateNetworkRequest) -> Result<models::Operation, Error<DetachInstanceFromSecurityGroupError>> {
    let local_var_id = id;
    let local_var_detach_instance_from_private_network_request = detach_instance_from_private_network_request;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(local_var_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
            let body_payload_option = Some(local_var_detach_instance_from_private_network_request);

    utils::execute_request(
    configuration,
    reqwest::Method::PUT,
    "/security-group/{id}:detach",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn get_security_group(configuration: &configuration::Configuration, id: String) -> Result<models::SecurityGroup, Error<GetSecurityGroupError>> {
    let local_var_id = id;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(local_var_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
        let body_payload_option: Option<()> = None;

    utils::execute_request(
    configuration,
    reqwest::Method::GET,
    "/security-group/{id}",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn list_security_groups(configuration: &configuration::Configuration, visibility: Option<&str>) -> Result<models::ListSecurityGroups200Response, Error<ListSecurityGroupsError>> {
    let local_var_visibility = visibility;

    let path_params_map = std::collections::HashMap::new();

    let mut query_params_vec: Vec<(&str, String)> = Vec::new();
                        if let Some(value) = &local_var_visibility {
                            query_params_vec.push(("visibility", value.to_string()));
                        }
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
        let body_payload_option: Option<()> = None;

    utils::execute_request(
    configuration,
    reqwest::Method::GET,
    "/security-group",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn remove_external_source_from_security_group(configuration: &configuration::Configuration, id: String, remove_external_source_from_security_group_request: models::RemoveExternalSourceFromSecurityGroupRequest) -> Result<models::Operation, Error<RemoveExternalSourceFromSecurityGroupError>> {
    let local_var_id = id;
    let local_var_remove_external_source_from_security_group_request = remove_external_source_from_security_group_request;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(local_var_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
            let body_payload_option = Some(local_var_remove_external_source_from_security_group_request);

    utils::execute_request(
    configuration,
    reqwest::Method::PUT,
    "/security-group/{id}:remove-source",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
