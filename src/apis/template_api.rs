/*
 * Exoscale Public API
 *
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 * Generated by: https://openapi-generator.tech
 */

use reqwest;

use super::{configuration, Error};
use crate::apis::ResponseContent;
use crate::sign_request;

/// struct for passing parameters to the method [`copy_template`]
#[derive(Clone, Debug)]
pub struct CopyTemplateParams {
    pub id: String,
    pub copy_template_request: crate::models::CopyTemplateRequest,
}

/// struct for passing parameters to the method [`delete_template`]
#[derive(Clone, Debug)]
pub struct DeleteTemplateParams {
    pub id: String,
}

/// struct for passing parameters to the method [`get_template`]
#[derive(Clone, Debug)]
pub struct GetTemplateParams {
    pub id: String,
}

/// struct for passing parameters to the method [`list_templates`]
#[derive(Clone, Debug)]
pub struct ListTemplatesParams {
    pub visibility: Option<String>,
    pub family: Option<String>,
}

/// struct for passing parameters to the method [`promote_snapshot_to_template`]
#[derive(Clone, Debug)]
pub struct PromoteSnapshotToTemplateParams {
    pub id: String,
    pub promote_snapshot_to_template_request: crate::models::PromoteSnapshotToTemplateRequest,
}

/// struct for passing parameters to the method [`register_template`]
#[derive(Clone, Debug)]
pub struct RegisterTemplateParams {
    pub register_template_request: crate::models::RegisterTemplateRequest,
}

/// struct for passing parameters to the method [`update_template`]
#[derive(Clone, Debug)]
pub struct UpdateTemplateParams {
    pub id: String,
    pub update_template_request: crate::models::UpdateTemplateRequest,
}

/// struct for typed errors of method [`copy_template`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CopyTemplateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_template`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteTemplateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_template`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetTemplateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_templates`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListTemplatesError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`promote_snapshot_to_template`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PromoteSnapshotToTemplateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`register_template`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RegisterTemplateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_template`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateTemplateError {
    UnknownValue(serde_json::Value),
}

///
pub async fn copy_template(
    configuration: &configuration::Configuration,
    params: CopyTemplateParams,
) -> Result<crate::models::Operation, Error<CopyTemplateError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;
    let copy_template_request = params.copy_template_request;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/template/{id}",
        local_var_configuration.base_path,
        id = crate::apis::urlencode(id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&copy_template_request);

    let mut local_var_req = local_var_req_builder.build()?;
    let _ = sign_request(&mut local_var_req, configuration);
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CopyTemplateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

///
pub async fn delete_template(
    configuration: &configuration::Configuration,
    params: DeleteTemplateParams,
) -> Result<crate::models::Operation, Error<DeleteTemplateError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/template/{id}",
        local_var_configuration.base_path,
        id = crate::apis::urlencode(id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let mut local_var_req = local_var_req_builder.build()?;
    let _ = sign_request(&mut local_var_req, configuration);
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DeleteTemplateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

///
pub async fn get_template(
    configuration: &configuration::Configuration,
    params: GetTemplateParams,
) -> Result<crate::models::Template, Error<GetTemplateError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/template/{id}",
        local_var_configuration.base_path,
        id = crate::apis::urlencode(id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let mut local_var_req = local_var_req_builder.build()?;
    let _ = sign_request(&mut local_var_req, configuration);
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetTemplateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

///
pub async fn list_templates(
    configuration: &configuration::Configuration,
    params: ListTemplatesParams,
) -> Result<crate::models::ListTemplates200Response, Error<ListTemplatesError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let visibility = params.visibility;
    let family = params.family;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/template", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = visibility {
        local_var_req_builder =
            local_var_req_builder.query(&[("visibility", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = family {
        local_var_req_builder =
            local_var_req_builder.query(&[("family", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let mut local_var_req = local_var_req_builder.build()?;
    let _ = sign_request(&mut local_var_req, configuration);
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListTemplatesError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

///
pub async fn promote_snapshot_to_template(
    configuration: &configuration::Configuration,
    params: PromoteSnapshotToTemplateParams,
) -> Result<crate::models::Operation, Error<PromoteSnapshotToTemplateError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;
    let promote_snapshot_to_template_request = params.promote_snapshot_to_template_request;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/snapshot/{id}:promote",
        local_var_configuration.base_path,
        id = crate::apis::urlencode(id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&promote_snapshot_to_template_request);

    let mut local_var_req = local_var_req_builder.build()?;
    let _ = sign_request(&mut local_var_req, configuration);
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PromoteSnapshotToTemplateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

///
pub async fn register_template(
    configuration: &configuration::Configuration,
    params: RegisterTemplateParams,
) -> Result<crate::models::Operation, Error<RegisterTemplateError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let register_template_request = params.register_template_request;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/template", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&register_template_request);

    let mut local_var_req = local_var_req_builder.build()?;
    let _ = sign_request(&mut local_var_req, configuration);
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<RegisterTemplateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

///
pub async fn update_template(
    configuration: &configuration::Configuration,
    params: UpdateTemplateParams,
) -> Result<crate::models::Operation, Error<UpdateTemplateError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;
    let update_template_request = params.update_template_request;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/template/{id}",
        local_var_configuration.base_path,
        id = crate::apis::urlencode(id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&update_template_request);

    let mut local_var_req = local_var_req_builder.build()?;
    let _ = sign_request(&mut local_var_req, configuration);
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UpdateTemplateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
