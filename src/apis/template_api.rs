/*
 * Exoscale Public API
 *
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 * Generated by: https://openapi-generator.tech
 */

use reqwest;
use serde::{Deserialize, Serialize};
use crate::{models, utils,apis::ResponseContent};
use super::{Error, configuration};


/// struct for typed errors of method [`copy_template`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CopyTemplateError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`delete_template`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteTemplateError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`get_template`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetTemplateError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`list_templates`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListTemplatesError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`promote_snapshot_to_template`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PromoteSnapshotToTemplateError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`register_template`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RegisterTemplateError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`update_template`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateTemplateError {
    UnknownValue(serde_json::Value),
}


pub async fn copy_template(configuration: &configuration::Configuration, id: String, copy_template_request: models::CopyTemplateRequest) -> Result<models::Operation, Error<CopyTemplateError>> {
    let local_var_id = id;
    let local_var_copy_template_request = copy_template_request;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(local_var_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
            let body_payload_option = Some(local_var_copy_template_request);

    utils::execute_request(
    configuration,
    reqwest::Method::POST,
    "/template/{id}",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn delete_template(configuration: &configuration::Configuration, id: String) -> Result<models::Operation, Error<DeleteTemplateError>> {
    let local_var_id = id;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(local_var_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
        let body_payload_option: Option<()> = None;

    utils::execute_request(
    configuration,
    reqwest::Method::DELETE,
    "/template/{id}",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn get_template(configuration: &configuration::Configuration, id: String) -> Result<models::Template, Error<GetTemplateError>> {
    let local_var_id = id;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(local_var_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
        let body_payload_option: Option<()> = None;

    utils::execute_request(
    configuration,
    reqwest::Method::GET,
    "/template/{id}",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn list_templates(configuration: &configuration::Configuration, visibility: Option<&str>, family: Option<&str>) -> Result<models::ListTemplates200Response, Error<ListTemplatesError>> {
    let local_var_visibility = visibility;
    let local_var_family = family;

    let path_params_map = std::collections::HashMap::new();

    let mut query_params_vec: Vec<(&str, String)> = Vec::new();
                        if let Some(value) = &local_var_visibility {
                            query_params_vec.push(("visibility", value.to_string()));
                        }
                        if let Some(value) = &local_var_family {
                            query_params_vec.push(("family", value.to_string()));
                        }
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
        let body_payload_option: Option<()> = None;

    utils::execute_request(
    configuration,
    reqwest::Method::GET,
    "/template",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn promote_snapshot_to_template(configuration: &configuration::Configuration, id: String, promote_snapshot_to_template_request: models::PromoteSnapshotToTemplateRequest) -> Result<models::Operation, Error<PromoteSnapshotToTemplateError>> {
    let local_var_id = id;
    let local_var_promote_snapshot_to_template_request = promote_snapshot_to_template_request;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(local_var_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
            let body_payload_option = Some(local_var_promote_snapshot_to_template_request);

    utils::execute_request(
    configuration,
    reqwest::Method::POST,
    "/snapshot/{id}:promote",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn register_template(configuration: &configuration::Configuration, register_template_request: models::RegisterTemplateRequest) -> Result<models::Operation, Error<RegisterTemplateError>> {
    let local_var_register_template_request = register_template_request;

    let path_params_map = std::collections::HashMap::new();

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
            let body_payload_option = Some(local_var_register_template_request);

    utils::execute_request(
    configuration,
    reqwest::Method::POST,
    "/template",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn update_template(configuration: &configuration::Configuration, id: String, update_template_request: models::UpdateTemplateRequest) -> Result<models::Operation, Error<UpdateTemplateError>> {
    let local_var_id = id;
    let local_var_update_template_request = update_template_request;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(local_var_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
            let body_payload_option = Some(local_var_update_template_request);

    utils::execute_request(
    configuration,
    reqwest::Method::PUT,
    "/template/{id}",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
