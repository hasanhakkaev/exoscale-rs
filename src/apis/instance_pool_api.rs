/*
 * Exoscale Public API
 *
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 * Generated by: https://openapi-generator.tech
 */

use reqwest;
use serde::{Deserialize, Serialize};
use crate::{models, utils,apis::ResponseContent};
use super::{Error, configuration};


/// struct for typed errors of method [`create_instance_pool`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateInstancePoolError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`delete_instance_pool`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteInstancePoolError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`evict_instance_pool_members`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EvictInstancePoolMembersError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`get_instance_pool`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetInstancePoolError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`list_instance_pools`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListInstancePoolsError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`reset_instance_pool_field`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ResetInstancePoolFieldError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`scale_instance_pool`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ScaleInstancePoolError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`update_instance_pool`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateInstancePoolError {
    UnknownValue(serde_json::Value),
}


pub async fn create_instance_pool(configuration: &configuration::Configuration, create_instance_pool_request: models::CreateInstancePoolRequest) -> Result<models::Operation, Error<CreateInstancePoolError>> {
    let local_var_create_instance_pool_request = create_instance_pool_request;

    let path_params_map = std::collections::HashMap::new();

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
            let body_payload_option = Some(local_var_create_instance_pool_request);

    utils::execute_request(
    configuration,
    reqwest::Method::POST,
    "/instance-pool",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn delete_instance_pool(configuration: &configuration::Configuration, id: String) -> Result<models::Operation, Error<DeleteInstancePoolError>> {
    let local_var_id = id;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(&local_var_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
        let body_payload_option: Option<()> = None;

    utils::execute_request(
    configuration,
    reqwest::Method::DELETE,
    "/instance-pool/{id}",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn evict_instance_pool_members(configuration: &configuration::Configuration, id: String, evict_instance_pool_members_request: models::EvictInstancePoolMembersRequest) -> Result<models::Operation, Error<EvictInstancePoolMembersError>> {
    let local_var_id = id;
    let local_var_evict_instance_pool_members_request = evict_instance_pool_members_request;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(&local_var_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
            let body_payload_option = Some(local_var_evict_instance_pool_members_request);

    utils::execute_request(
    configuration,
    reqwest::Method::PUT,
    "/instance-pool/{id}:evict",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn get_instance_pool(configuration: &configuration::Configuration, id: String) -> Result<models::InstancePool, Error<GetInstancePoolError>> {
    let local_var_id = id;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(&local_var_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
        let body_payload_option: Option<()> = None;

    utils::execute_request(
    configuration,
    reqwest::Method::GET,
    "/instance-pool/{id}",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn list_instance_pools(configuration: &configuration::Configuration, ) -> Result<models::ListInstancePools200Response, Error<ListInstancePoolsError>> {

    let path_params_map = std::collections::HashMap::new();

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
        let body_payload_option: Option<()> = None;

    utils::execute_request(
    configuration,
    reqwest::Method::GET,
    "/instance-pool",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn reset_instance_pool_field(configuration: &configuration::Configuration, id: String, field: &str) -> Result<models::Operation, Error<ResetInstancePoolFieldError>> {
    let local_var_id = id;
    let local_var_field = field;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(&local_var_id));
                path_params_map.insert("field".to_string(), crate::apis::urlencode(&local_var_field));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
        let body_payload_option: Option<()> = None;

    utils::execute_request(
    configuration,
    reqwest::Method::DELETE,
    "/instance-pool/{id}/{field}",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn scale_instance_pool(configuration: &configuration::Configuration, id: String, scale_instance_pool_request: models::ScaleInstancePoolRequest) -> Result<models::Operation, Error<ScaleInstancePoolError>> {
    let local_var_id = id;
    let local_var_scale_instance_pool_request = scale_instance_pool_request;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(&local_var_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
            let body_payload_option = Some(local_var_scale_instance_pool_request);

    utils::execute_request(
    configuration,
    reqwest::Method::PUT,
    "/instance-pool/{id}:scale",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn update_instance_pool(configuration: &configuration::Configuration, id: String, update_instance_pool_request: models::UpdateInstancePoolRequest) -> Result<models::Operation, Error<UpdateInstancePoolError>> {
    let local_var_id = id;
    let local_var_update_instance_pool_request = update_instance_pool_request;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(&local_var_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
            let body_payload_option = Some(local_var_update_instance_pool_request);

    utils::execute_request(
    configuration,
    reqwest::Method::PUT,
    "/instance-pool/{id}",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
