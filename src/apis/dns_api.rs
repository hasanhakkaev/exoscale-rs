/*
 * Exoscale Public API
 *
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 * Generated by: https://openapi-generator.tech
 */

use reqwest;

use super::{configuration, Error};
use crate::apis::ResponseContent;
use crate::sign_request;

/// struct for passing parameters to the method [`create_dns_domain`]
#[derive(Clone, Debug)]
pub struct CreateDnsDomainParams {
    pub create_dns_domain_request: crate::models::CreateDnsDomainRequest,
}

/// struct for passing parameters to the method [`create_dns_domain_record`]
#[derive(Clone, Debug)]
pub struct CreateDnsDomainRecordParams {
    pub domain_id: String,
    pub create_dns_domain_record_request: crate::models::CreateDnsDomainRecordRequest,
}

/// struct for passing parameters to the method [`delete_dns_domain`]
#[derive(Clone, Debug)]
pub struct DeleteDnsDomainParams {
    pub id: String,
}

/// struct for passing parameters to the method [`delete_dns_domain_record`]
#[derive(Clone, Debug)]
pub struct DeleteDnsDomainRecordParams {
    pub domain_id: String,
    pub record_id: String,
}

/// struct for passing parameters to the method [`get_dns_domain`]
#[derive(Clone, Debug)]
pub struct GetDnsDomainParams {
    pub id: String,
}

/// struct for passing parameters to the method [`get_dns_domain_record`]
#[derive(Clone, Debug)]
pub struct GetDnsDomainRecordParams {
    pub domain_id: String,
    pub record_id: String,
}

/// struct for passing parameters to the method [`get_dns_domain_zone_file`]
#[derive(Clone, Debug)]
pub struct GetDnsDomainZoneFileParams {
    pub id: String,
}

/// struct for passing parameters to the method [`list_dns_domain_records`]
#[derive(Clone, Debug)]
pub struct ListDnsDomainRecordsParams {
    pub domain_id: String,
}

/// struct for passing parameters to the method [`update_dns_domain_record`]
#[derive(Clone, Debug)]
pub struct UpdateDnsDomainRecordParams {
    pub domain_id: String,
    pub record_id: String,
    pub update_dns_domain_record_request: crate::models::UpdateDnsDomainRecordRequest,
}

/// struct for typed errors of method [`create_dns_domain`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateDnsDomainError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_dns_domain_record`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateDnsDomainRecordError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_dns_domain`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteDnsDomainError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_dns_domain_record`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteDnsDomainRecordError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_dns_domain`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetDnsDomainError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_dns_domain_record`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetDnsDomainRecordError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_dns_domain_zone_file`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetDnsDomainZoneFileError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_dns_domain_records`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListDnsDomainRecordsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_dns_domains`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListDnsDomainsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_dns_domain_record`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateDnsDomainRecordError {
    UnknownValue(serde_json::Value),
}

///
pub async fn create_dns_domain(
    configuration: &configuration::Configuration,
    params: CreateDnsDomainParams,
) -> Result<crate::models::DnsDomain, Error<CreateDnsDomainError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let create_dns_domain_request = params.create_dns_domain_request;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dns-domain", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    if let Some(ref local_var_user_agent) = local_var_configuration.content_type {
        local_var_req_builder = local_var_req_builder
            .header(reqwest::header::CONTENT_TYPE, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&create_dns_domain_request);

    let mut local_var_req = local_var_req_builder.build()?;
    let _ = sign_request(&mut local_var_req, configuration);
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CreateDnsDomainError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

///
pub async fn create_dns_domain_record(
    configuration: &configuration::Configuration,
    params: CreateDnsDomainRecordParams,
) -> Result<crate::models::Operation, Error<CreateDnsDomainRecordError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let domain_id = params.domain_id;
    let create_dns_domain_record_request = params.create_dns_domain_record_request;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/dns-domain/{domain_id}/record",
        local_var_configuration.base_path,
        domain_id = crate::apis::urlencode(domain_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    if let Some(ref local_var_user_agent) = local_var_configuration.content_type {
        local_var_req_builder = local_var_req_builder
            .header(reqwest::header::CONTENT_TYPE, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&create_dns_domain_record_request);

    let mut local_var_req = local_var_req_builder.build()?;
    let _ = sign_request(&mut local_var_req, configuration);
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CreateDnsDomainRecordError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

///
pub async fn delete_dns_domain(
    configuration: &configuration::Configuration,
    params: DeleteDnsDomainParams,
) -> Result<crate::models::Operation, Error<DeleteDnsDomainError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/dns-domain/{id}",
        local_var_configuration.base_path,
        id = crate::apis::urlencode(id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    if let Some(ref local_var_user_agent) = local_var_configuration.content_type {
        local_var_req_builder = local_var_req_builder
            .header(reqwest::header::CONTENT_TYPE, local_var_user_agent.clone());
    }

    let mut local_var_req = local_var_req_builder.build()?;
    let _ = sign_request(&mut local_var_req, configuration);
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DeleteDnsDomainError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

///
pub async fn delete_dns_domain_record(
    configuration: &configuration::Configuration,
    params: DeleteDnsDomainRecordParams,
) -> Result<crate::models::Operation, Error<DeleteDnsDomainRecordError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let domain_id = params.domain_id;
    let record_id = params.record_id;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/dns-domain/{domain_id}/record/{record_id}",
        local_var_configuration.base_path,
        domain_id = crate::apis::urlencode(domain_id),
        record_id = crate::apis::urlencode(record_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    if let Some(ref local_var_user_agent) = local_var_configuration.content_type {
        local_var_req_builder = local_var_req_builder
            .header(reqwest::header::CONTENT_TYPE, local_var_user_agent.clone());
    }

    let mut local_var_req = local_var_req_builder.build()?;
    let _ = sign_request(&mut local_var_req, configuration);
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DeleteDnsDomainRecordError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

///
pub async fn get_dns_domain(
    configuration: &configuration::Configuration,
    params: GetDnsDomainParams,
) -> Result<crate::models::DnsDomain, Error<GetDnsDomainError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/dns-domain/{id}",
        local_var_configuration.base_path,
        id = crate::apis::urlencode(id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    if let Some(ref local_var_user_agent) = local_var_configuration.content_type {
        local_var_req_builder = local_var_req_builder
            .header(reqwest::header::CONTENT_TYPE, local_var_user_agent.clone());
    }

    let mut local_var_req = local_var_req_builder.build()?;
    let _ = sign_request(&mut local_var_req, configuration);
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetDnsDomainError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

///
pub async fn get_dns_domain_record(
    configuration: &configuration::Configuration,
    params: GetDnsDomainRecordParams,
) -> Result<crate::models::DnsDomainRecord, Error<GetDnsDomainRecordError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let domain_id = params.domain_id;
    let record_id = params.record_id;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/dns-domain/{domain_id}/record/{record_id}",
        local_var_configuration.base_path,
        domain_id = crate::apis::urlencode(domain_id),
        record_id = crate::apis::urlencode(record_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    if let Some(ref local_var_user_agent) = local_var_configuration.content_type {
        local_var_req_builder = local_var_req_builder
            .header(reqwest::header::CONTENT_TYPE, local_var_user_agent.clone());
    }

    let mut local_var_req = local_var_req_builder.build()?;
    let _ = sign_request(&mut local_var_req, configuration);
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetDnsDomainRecordError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

///
pub async fn get_dns_domain_zone_file(
    configuration: &configuration::Configuration,
    params: GetDnsDomainZoneFileParams,
) -> Result<crate::models::GetDnsDomainZoneFile200Response, Error<GetDnsDomainZoneFileError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/dns-domain/{id}/zone",
        local_var_configuration.base_path,
        id = crate::apis::urlencode(id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    if let Some(ref local_var_user_agent) = local_var_configuration.content_type {
        local_var_req_builder = local_var_req_builder
            .header(reqwest::header::CONTENT_TYPE, local_var_user_agent.clone());
    }

    let mut local_var_req = local_var_req_builder.build()?;
    let _ = sign_request(&mut local_var_req, configuration);
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetDnsDomainZoneFileError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

///
pub async fn list_dns_domain_records(
    configuration: &configuration::Configuration,
    params: ListDnsDomainRecordsParams,
) -> Result<crate::models::ListDnsDomainRecords200Response, Error<ListDnsDomainRecordsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let domain_id = params.domain_id;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/dns-domain/{domain_id}/record",
        local_var_configuration.base_path,
        domain_id = crate::apis::urlencode(domain_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    if let Some(ref local_var_user_agent) = local_var_configuration.content_type {
        local_var_req_builder = local_var_req_builder
            .header(reqwest::header::CONTENT_TYPE, local_var_user_agent.clone());
    }

    let mut local_var_req = local_var_req_builder.build()?;
    let _ = sign_request(&mut local_var_req, configuration);
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListDnsDomainRecordsError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

///
pub async fn list_dns_domains(
    configuration: &configuration::Configuration,
) -> Result<crate::models::ListDnsDomains200Response, Error<ListDnsDomainsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dns-domain", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    if let Some(ref local_var_user_agent) = local_var_configuration.content_type {
        local_var_req_builder = local_var_req_builder
            .header(reqwest::header::CONTENT_TYPE, local_var_user_agent.clone());
    }

    let mut local_var_req = local_var_req_builder.build()?;
    let _ = sign_request(&mut local_var_req, configuration);
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListDnsDomainsError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

///
pub async fn update_dns_domain_record(
    configuration: &configuration::Configuration,
    params: UpdateDnsDomainRecordParams,
) -> Result<crate::models::Operation, Error<UpdateDnsDomainRecordError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let domain_id = params.domain_id;
    let record_id = params.record_id;
    let update_dns_domain_record_request = params.update_dns_domain_record_request;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/dns-domain/{domain_id}/record/{record_id}",
        local_var_configuration.base_path,
        domain_id = crate::apis::urlencode(domain_id),
        record_id = crate::apis::urlencode(record_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    if let Some(ref local_var_user_agent) = local_var_configuration.content_type {
        local_var_req_builder = local_var_req_builder
            .header(reqwest::header::CONTENT_TYPE, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&update_dns_domain_record_request);

    let mut local_var_req = local_var_req_builder.build()?;
    let _ = sign_request(&mut local_var_req, configuration);
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UpdateDnsDomainRecordError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
