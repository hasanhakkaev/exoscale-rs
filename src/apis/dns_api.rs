/*
 * Exoscale Public API
 *
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 * Generated by: https://openapi-generator.tech
 */

use reqwest;
use serde::{Deserialize, Serialize};
use crate::{models, utils,apis::ResponseContent};
use super::{Error, configuration};


/// struct for typed errors of method [`create_dns_domain`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateDnsDomainError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`create_dns_domain_record`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateDnsDomainRecordError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`delete_dns_domain`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteDnsDomainError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`delete_dns_domain_record`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteDnsDomainRecordError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`get_dns_domain`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetDnsDomainError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`get_dns_domain_record`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetDnsDomainRecordError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`get_dns_domain_zone_file`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetDnsDomainZoneFileError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`list_dns_domain_records`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListDnsDomainRecordsError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`list_dns_domains`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListDnsDomainsError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`update_dns_domain_record`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateDnsDomainRecordError {
    UnknownValue(serde_json::Value),
}


pub async fn create_dns_domain(configuration: &configuration::Configuration, create_dns_domain_request: models::CreateDnsDomainRequest) -> Result<models::Operation, Error<CreateDnsDomainError>> {
    let local_var_create_dns_domain_request = create_dns_domain_request;

    let path_params_map = std::collections::HashMap::new();

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
            let body_payload_option = Some(local_var_create_dns_domain_request);

    utils::execute_request(
    configuration,
    reqwest::Method::POST,
    "/dns-domain",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn create_dns_domain_record(configuration: &configuration::Configuration, domain_id: String, create_dns_domain_record_request: models::CreateDnsDomainRecordRequest) -> Result<models::Operation, Error<CreateDnsDomainRecordError>> {
    let local_var_domain_id = domain_id;
    let local_var_create_dns_domain_record_request = create_dns_domain_record_request;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("domain_id".to_string(), crate::apis::urlencode(local_var_domain_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
            let body_payload_option = Some(local_var_create_dns_domain_record_request);

    utils::execute_request(
    configuration,
    reqwest::Method::POST,
    "/dns-domain/{domain_id}/record",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn delete_dns_domain(configuration: &configuration::Configuration, id: String) -> Result<models::Operation, Error<DeleteDnsDomainError>> {
    let local_var_id = id;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(local_var_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
        let body_payload_option: Option<()> = None;

    utils::execute_request(
    configuration,
    reqwest::Method::DELETE,
    "/dns-domain/{id}",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn delete_dns_domain_record(configuration: &configuration::Configuration, domain_id: String, record_id: String) -> Result<models::Operation, Error<DeleteDnsDomainRecordError>> {
    let local_var_domain_id = domain_id;
    let local_var_record_id = record_id;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("domain_id".to_string(), crate::apis::urlencode(local_var_domain_id));
                path_params_map.insert("record_id".to_string(), crate::apis::urlencode(local_var_record_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
        let body_payload_option: Option<()> = None;

    utils::execute_request(
    configuration,
    reqwest::Method::DELETE,
    "/dns-domain/{domain_id}/record/{record_id}",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn get_dns_domain(configuration: &configuration::Configuration, id: String) -> Result<models::DnsDomain, Error<GetDnsDomainError>> {
    let local_var_id = id;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(local_var_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
        let body_payload_option: Option<()> = None;

    utils::execute_request(
    configuration,
    reqwest::Method::GET,
    "/dns-domain/{id}",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn get_dns_domain_record(configuration: &configuration::Configuration, domain_id: String, record_id: String) -> Result<models::DnsDomainRecord, Error<GetDnsDomainRecordError>> {
    let local_var_domain_id = domain_id;
    let local_var_record_id = record_id;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("domain_id".to_string(), crate::apis::urlencode(local_var_domain_id));
                path_params_map.insert("record_id".to_string(), crate::apis::urlencode(local_var_record_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
        let body_payload_option: Option<()> = None;

    utils::execute_request(
    configuration,
    reqwest::Method::GET,
    "/dns-domain/{domain_id}/record/{record_id}",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn get_dns_domain_zone_file(configuration: &configuration::Configuration, id: String) -> Result<models::GetDnsDomainZoneFile200Response, Error<GetDnsDomainZoneFileError>> {
    let local_var_id = id;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(local_var_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
        let body_payload_option: Option<()> = None;

    utils::execute_request(
    configuration,
    reqwest::Method::GET,
    "/dns-domain/{id}/zone",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn list_dns_domain_records(configuration: &configuration::Configuration, domain_id: String) -> Result<models::ListDnsDomainRecords200Response, Error<ListDnsDomainRecordsError>> {
    let local_var_domain_id = domain_id;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("domain_id".to_string(), crate::apis::urlencode(local_var_domain_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
        let body_payload_option: Option<()> = None;

    utils::execute_request(
    configuration,
    reqwest::Method::GET,
    "/dns-domain/{domain_id}/record",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn list_dns_domains(configuration: &configuration::Configuration, ) -> Result<models::ListDnsDomains200Response, Error<ListDnsDomainsError>> {

    let path_params_map = std::collections::HashMap::new();

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
        let body_payload_option: Option<()> = None;

    utils::execute_request(
    configuration,
    reqwest::Method::GET,
    "/dns-domain",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn update_dns_domain_record(configuration: &configuration::Configuration, domain_id: String, record_id: String, update_dns_domain_record_request: models::UpdateDnsDomainRecordRequest) -> Result<models::Operation, Error<UpdateDnsDomainRecordError>> {
    let local_var_domain_id = domain_id;
    let local_var_record_id = record_id;
    let local_var_update_dns_domain_record_request = update_dns_domain_record_request;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("domain_id".to_string(), crate::apis::urlencode(local_var_domain_id));
                path_params_map.insert("record_id".to_string(), crate::apis::urlencode(local_var_record_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
            let body_payload_option = Some(local_var_update_dns_domain_record_request);

    utils::execute_request(
    configuration,
    reqwest::Method::PUT,
    "/dns-domain/{domain_id}/record/{record_id}",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
