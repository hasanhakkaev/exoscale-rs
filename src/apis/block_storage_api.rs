/*
 * Exoscale Public API
 *
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 * Generated by: https://openapi-generator.tech
 */

use reqwest;
use serde::{Deserialize, Serialize};
use crate::{models, utils,apis::ResponseContent};
use super::{Error, configuration};


/// struct for typed errors of method [`attach_block_storage_volume_to_instance`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AttachBlockStorageVolumeToInstanceError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`create_block_storage_snapshot`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateBlockStorageSnapshotError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`create_block_storage_volume`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateBlockStorageVolumeError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`delete_block_storage_snapshot`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteBlockStorageSnapshotError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`delete_block_storage_volume`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteBlockStorageVolumeError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`detach_block_storage_volume`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DetachBlockStorageVolumeError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`get_block_storage_snapshot`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetBlockStorageSnapshotError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`get_block_storage_volume`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetBlockStorageVolumeError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`list_block_storage_snapshots`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListBlockStorageSnapshotsError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`list_block_storage_volumes`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListBlockStorageVolumesError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`resize_block_storage_volume`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ResizeBlockStorageVolumeError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`update_block_storage_snapshot`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateBlockStorageSnapshotError {
    UnknownValue(serde_json::Value),
}


/// struct for typed errors of method [`update_block_storage_volume`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateBlockStorageVolumeError {
    UnknownValue(serde_json::Value),
}


pub async fn attach_block_storage_volume_to_instance(configuration: &configuration::Configuration, id: String, attach_block_storage_volume_to_instance_request: models::AttachBlockStorageVolumeToInstanceRequest) -> Result<models::Operation, Error<AttachBlockStorageVolumeToInstanceError>> {
    let local_var_id = id;
    let local_var_attach_block_storage_volume_to_instance_request = attach_block_storage_volume_to_instance_request;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(local_var_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
            let body_payload_option = Some(local_var_attach_block_storage_volume_to_instance_request);

    utils::execute_request(
    configuration,
    reqwest::Method::PUT,
    "/block-storage/{id}:attach",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn create_block_storage_snapshot(configuration: &configuration::Configuration, id: String, create_block_storage_snapshot_request: models::CreateBlockStorageSnapshotRequest) -> Result<models::Operation, Error<CreateBlockStorageSnapshotError>> {
    let local_var_id = id;
    let local_var_create_block_storage_snapshot_request = create_block_storage_snapshot_request;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(local_var_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
            let body_payload_option = Some(local_var_create_block_storage_snapshot_request);

    utils::execute_request(
    configuration,
    reqwest::Method::POST,
    "/block-storage/{id}:create-snapshot",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn create_block_storage_volume(configuration: &configuration::Configuration, create_block_storage_volume_request: models::CreateBlockStorageVolumeRequest) -> Result<models::Operation, Error<CreateBlockStorageVolumeError>> {
    let local_var_create_block_storage_volume_request = create_block_storage_volume_request;

    let path_params_map = std::collections::HashMap::new();

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
            let body_payload_option = Some(local_var_create_block_storage_volume_request);

    utils::execute_request(
    configuration,
    reqwest::Method::POST,
    "/block-storage",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn delete_block_storage_snapshot(configuration: &configuration::Configuration, id: String) -> Result<models::Operation, Error<DeleteBlockStorageSnapshotError>> {
    let local_var_id = id;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(local_var_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
        let body_payload_option: Option<()> = None;

    utils::execute_request(
    configuration,
    reqwest::Method::DELETE,
    "/block-storage-snapshot/{id}",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn delete_block_storage_volume(configuration: &configuration::Configuration, id: String) -> Result<models::Operation, Error<DeleteBlockStorageVolumeError>> {
    let local_var_id = id;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(local_var_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
        let body_payload_option: Option<()> = None;

    utils::execute_request(
    configuration,
    reqwest::Method::DELETE,
    "/block-storage/{id}",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn detach_block_storage_volume(configuration: &configuration::Configuration, id: String) -> Result<models::Operation, Error<DetachBlockStorageVolumeError>> {
    let local_var_id = id;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(local_var_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
        let body_payload_option: Option<()> = None;

    utils::execute_request(
    configuration,
    reqwest::Method::PUT,
    "/block-storage/{id}:detach",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn get_block_storage_snapshot(configuration: &configuration::Configuration, id: String) -> Result<models::BlockStorageSnapshot, Error<GetBlockStorageSnapshotError>> {
    let local_var_id = id;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(local_var_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
        let body_payload_option: Option<()> = None;

    utils::execute_request(
    configuration,
    reqwest::Method::GET,
    "/block-storage-snapshot/{id}",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn get_block_storage_volume(configuration: &configuration::Configuration, id: String) -> Result<models::BlockStorageVolume, Error<GetBlockStorageVolumeError>> {
    let local_var_id = id;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(local_var_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
        let body_payload_option: Option<()> = None;

    utils::execute_request(
    configuration,
    reqwest::Method::GET,
    "/block-storage/{id}",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn list_block_storage_snapshots(configuration: &configuration::Configuration, ) -> Result<models::ListBlockStorageSnapshots200Response, Error<ListBlockStorageSnapshotsError>> {

    let path_params_map = std::collections::HashMap::new();

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
        let body_payload_option: Option<()> = None;

    utils::execute_request(
    configuration,
    reqwest::Method::GET,
    "/block-storage-snapshot",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn list_block_storage_volumes(configuration: &configuration::Configuration, instance_id: Option<String>) -> Result<models::ListBlockStorageVolumes200Response, Error<ListBlockStorageVolumesError>> {
    let local_var_instance_id = instance_id;

    let path_params_map = std::collections::HashMap::new();

    let mut query_params_vec: Vec<(&str, String)> = Vec::new();
                        if let Some(value) = &local_var_instance_id {
                            query_params_vec.push(("instance-id", value.to_string()));
                        }
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
        let body_payload_option: Option<()> = None;

    utils::execute_request(
    configuration,
    reqwest::Method::GET,
    "/block-storage",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn resize_block_storage_volume(configuration: &configuration::Configuration, id: String, resize_block_storage_volume_request: models::ResizeBlockStorageVolumeRequest) -> Result<models::BlockStorageVolume, Error<ResizeBlockStorageVolumeError>> {
    let local_var_id = id;
    let local_var_resize_block_storage_volume_request = resize_block_storage_volume_request;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(local_var_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
            let body_payload_option = Some(local_var_resize_block_storage_volume_request);

    utils::execute_request(
    configuration,
    reqwest::Method::PUT,
    "/block-storage/{id}:resize-volume",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn update_block_storage_snapshot(configuration: &configuration::Configuration, id: String, update_block_storage_snapshot_request: models::UpdateBlockStorageSnapshotRequest) -> Result<models::Operation, Error<UpdateBlockStorageSnapshotError>> {
    let local_var_id = id;
    let local_var_update_block_storage_snapshot_request = update_block_storage_snapshot_request;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(local_var_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
            let body_payload_option = Some(local_var_update_block_storage_snapshot_request);

    utils::execute_request(
    configuration,
    reqwest::Method::PUT,
    "/block-storage-snapshot/{id}",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
pub async fn update_block_storage_volume(configuration: &configuration::Configuration, id: String, update_block_storage_volume_request: models::UpdateBlockStorageVolumeRequest) -> Result<models::Operation, Error<UpdateBlockStorageVolumeError>> {
    let local_var_id = id;
    let local_var_update_block_storage_volume_request = update_block_storage_volume_request;

    let mut path_params_map = std::collections::HashMap::new();
                path_params_map.insert("id".to_string(), crate::apis::urlencode(local_var_id));

    let query_params_vec: Vec<(&str, String)> = Vec::new();
    let query_params_option = if query_params_vec.is_empty() { None } else { Some(query_params_vec.as_slice())};
            let body_payload_option = Some(local_var_update_block_storage_volume_request);

    utils::execute_request(
    configuration,
    reqwest::Method::PUT,
    "/block-storage/{id}",
    path_params_map,
    query_params_option,
    body_payload_option,
    ).await
}
